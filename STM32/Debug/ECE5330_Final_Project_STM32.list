
ECE5330_Final_Project_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d00  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003e98  08003e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb8  08003eb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ec0  08003ec0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ec4  08003ec4  00013ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  08003ed4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003ed4  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b784  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a66  00000000  00000000  0002b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  0002d228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  0002de48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f45  00000000  00000000  0002e990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a19  00000000  00000000  000448d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008afea  00000000  00000000  0004d2ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d82d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003294  00000000  00000000  000d8354  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003e80 	.word	0x08003e80

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003e80 	.word	0x08003e80

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <HAL_Init+0x40>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <HAL_Init+0x40>)
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_Init+0x40>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f94d 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f003 faa4 	bl	8003a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f965 	bl	800080a <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f92d 	bl	80007b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000038 	.word	0x20000038

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000038 	.word	0x20000038

080005bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff ffee 	bl	80005a4 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d005      	beq.n	80005e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_Delay+0x40>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffde 	bl	80005a4 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d8f7      	bhi.n	80005e4 <HAL_Delay+0x28>
  {
  }
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000004 	.word	0x20000004

08000600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	60d3      	str	r3, [r2, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <__NVIC_GetPriorityGrouping+0x18>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	f003 0307 	and.w	r3, r3, #7
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	2b00      	cmp	r3, #0
 8000674:	db0b      	blt.n	800068e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 021f 	and.w	r2, r3, #31
 800067c:	4907      	ldr	r1, [pc, #28]	; (800069c <__NVIC_EnableIRQ+0x38>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	095b      	lsrs	r3, r3, #5
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f202 	lsl.w	r2, r0, r2
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e100 	.word	0xe000e100

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	490c      	ldr	r1, [pc, #48]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	; (80006f0 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	43d9      	mvns	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	; 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800076c:	d301      	bcc.n	8000772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076e:	2301      	movs	r3, #1
 8000770:	e00f      	b.n	8000792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <SysTick_Config+0x40>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077a:	210f      	movs	r1, #15
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f7ff ff8e 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <SysTick_Config+0x40>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	4b04      	ldr	r3, [pc, #16]	; (800079c <SysTick_Config+0x40>)
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff29 	bl	8000600 <__NVIC_SetPriorityGrouping>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c8:	f7ff ff3e 	bl	8000648 <__NVIC_GetPriorityGrouping>
 80007cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	6978      	ldr	r0, [r7, #20]
 80007d4:	f7ff ff8e 	bl	80006f4 <NVIC_EncodePriority>
 80007d8:	4602      	mov	r2, r0
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff5d 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff31 	bl	8000664 <__NVIC_EnableIRQ>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffa2 	bl	800075c <SysTick_Config>
 8000818:	4603      	mov	r3, r0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000830:	f7ff feb8 	bl	80005a4 <HAL_GetTick>
 8000834:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d101      	bne.n	8000840 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	e099      	b.n	8000974 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2202      	movs	r2, #2
 800084c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f022 0201 	bic.w	r2, r2, #1
 800085e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000860:	e00f      	b.n	8000882 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000862:	f7ff fe9f 	bl	80005a4 <HAL_GetTick>
 8000866:	4602      	mov	r2, r0
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	2b05      	cmp	r3, #5
 800086e:	d908      	bls.n	8000882 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2220      	movs	r2, #32
 8000874:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2203      	movs	r2, #3
 800087a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800087e:	2303      	movs	r3, #3
 8000880:	e078      	b.n	8000974 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1e8      	bne.n	8000862 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	4b38      	ldr	r3, [pc, #224]	; (800097c <HAL_DMA_Init+0x158>)
 800089c:	4013      	ands	r3, r2
 800089e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	691b      	ldr	r3, [r3, #16]
 80008b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6a1b      	ldr	r3, [r3, #32]
 80008cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d107      	bne.n	80008ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	4313      	orrs	r3, r2
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	697a      	ldr	r2, [r7, #20]
 80008f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	f023 0307 	bic.w	r3, r3, #7
 8000902:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	4313      	orrs	r3, r2
 800090c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000912:	2b04      	cmp	r3, #4
 8000914:	d117      	bne.n	8000946 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	4313      	orrs	r3, r2
 800091e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000924:	2b00      	cmp	r3, #0
 8000926:	d00e      	beq.n	8000946 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f000 fa99 	bl	8000e60 <DMA_CheckFifoParam>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d008      	beq.n	8000946 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2240      	movs	r2, #64	; 0x40
 8000938:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2201      	movs	r2, #1
 800093e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000942:	2301      	movs	r3, #1
 8000944:	e016      	b.n	8000974 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 fa50 	bl	8000df4 <DMA_CalcBaseAndBitshift>
 8000954:	4603      	mov	r3, r0
 8000956:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800095c:	223f      	movs	r2, #63	; 0x3f
 800095e:	409a      	lsls	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2201      	movs	r2, #1
 800096e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	f010803f 	.word	0xf010803f

08000980 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
 800098c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d101      	bne.n	80009a6 <HAL_DMA_Start_IT+0x26>
 80009a2:	2302      	movs	r3, #2
 80009a4:	e048      	b.n	8000a38 <HAL_DMA_Start_IT+0xb8>
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2201      	movs	r2, #1
 80009aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d137      	bne.n	8000a2a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2202      	movs	r2, #2
 80009be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2200      	movs	r2, #0
 80009c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f000 f9e2 	bl	8000d98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009d8:	223f      	movs	r2, #63	; 0x3f
 80009da:	409a      	lsls	r2, r3
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f042 0216 	orr.w	r2, r2, #22
 80009ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	695a      	ldr	r2, [r3, #20]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009fe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d007      	beq.n	8000a18 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f042 0208 	orr.w	r2, r2, #8
 8000a16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f042 0201 	orr.w	r2, r2, #1
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	e005      	b.n	8000a36 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a32:	2302      	movs	r3, #2
 8000a34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d004      	beq.n	8000a5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00c      	b.n	8000a78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2205      	movs	r2, #5
 8000a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f022 0201 	bic.w	r2, r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a90:	4b92      	ldr	r3, [pc, #584]	; (8000cdc <HAL_DMA_IRQHandler+0x258>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a92      	ldr	r2, [pc, #584]	; (8000ce0 <HAL_DMA_IRQHandler+0x25c>)
 8000a96:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9a:	0a9b      	lsrs	r3, r3, #10
 8000a9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aae:	2208      	movs	r2, #8
 8000ab0:	409a      	lsls	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d01a      	beq.n	8000af0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d013      	beq.n	8000af0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f022 0204 	bic.w	r2, r2, #4
 8000ad6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000adc:	2208      	movs	r2, #8
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ae8:	f043 0201 	orr.w	r2, r3, #1
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af4:	2201      	movs	r2, #1
 8000af6:	409a      	lsls	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4013      	ands	r3, r2
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d012      	beq.n	8000b26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00b      	beq.n	8000b26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b12:	2201      	movs	r2, #1
 8000b14:	409a      	lsls	r2, r3
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b1e:	f043 0202 	orr.w	r2, r3, #2
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	409a      	lsls	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4013      	ands	r3, r2
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d012      	beq.n	8000b5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f003 0302 	and.w	r3, r3, #2
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d00b      	beq.n	8000b5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b48:	2204      	movs	r2, #4
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b54:	f043 0204 	orr.w	r2, r3, #4
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b60:	2210      	movs	r2, #16
 8000b62:	409a      	lsls	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4013      	ands	r3, r2
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d043      	beq.n	8000bf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d03c      	beq.n	8000bf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b7e:	2210      	movs	r2, #16
 8000b80:	409a      	lsls	r2, r3
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d018      	beq.n	8000bc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d108      	bne.n	8000bb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d024      	beq.n	8000bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	4798      	blx	r3
 8000bb2:	e01f      	b.n	8000bf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d01b      	beq.n	8000bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	4798      	blx	r3
 8000bc4:	e016      	b.n	8000bf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d107      	bne.n	8000be4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 0208 	bic.w	r2, r2, #8
 8000be2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bf8:	2220      	movs	r2, #32
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f000 808e 	beq.w	8000d22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f003 0310 	and.w	r3, r3, #16
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f000 8086 	beq.w	8000d22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	409a      	lsls	r2, r3
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b05      	cmp	r3, #5
 8000c2c:	d136      	bne.n	8000c9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 0216 	bic.w	r2, r2, #22
 8000c3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	695a      	ldr	r2, [r3, #20]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d103      	bne.n	8000c5e <HAL_DMA_IRQHandler+0x1da>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d007      	beq.n	8000c6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f022 0208 	bic.w	r2, r2, #8
 8000c6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c72:	223f      	movs	r2, #63	; 0x3f
 8000c74:	409a      	lsls	r2, r3
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2201      	movs	r2, #1
 8000c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d07d      	beq.n	8000d8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	4798      	blx	r3
        }
        return;
 8000c9a:	e078      	b.n	8000d8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d01c      	beq.n	8000ce4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d108      	bne.n	8000cca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d030      	beq.n	8000d22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	4798      	blx	r3
 8000cc8:	e02b      	b.n	8000d22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d027      	beq.n	8000d22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	4798      	blx	r3
 8000cda:	e022      	b.n	8000d22 <HAL_DMA_IRQHandler+0x29e>
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10f      	bne.n	8000d12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 0210 	bic.w	r2, r2, #16
 8000d00:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d032      	beq.n	8000d90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d022      	beq.n	8000d7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2205      	movs	r2, #5
 8000d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 0201 	bic.w	r2, r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	3301      	adds	r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d307      	bcc.n	8000d6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f2      	bne.n	8000d4e <HAL_DMA_IRQHandler+0x2ca>
 8000d68:	e000      	b.n	8000d6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000d6a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2201      	movs	r2, #1
 8000d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d005      	beq.n	8000d90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	4798      	blx	r3
 8000d8c:	e000      	b.n	8000d90 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d8e:	bf00      	nop
    }
  }
}
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop

08000d98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000db4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	2b40      	cmp	r3, #64	; 0x40
 8000dc4:	d108      	bne.n	8000dd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000dd6:	e007      	b.n	8000de8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	60da      	str	r2, [r3, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	3b10      	subs	r3, #16
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <DMA_CalcBaseAndBitshift+0x64>)
 8000e06:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0a:	091b      	lsrs	r3, r3, #4
 8000e0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <DMA_CalcBaseAndBitshift+0x68>)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d909      	bls.n	8000e36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e2a:	f023 0303 	bic.w	r3, r3, #3
 8000e2e:	1d1a      	adds	r2, r3, #4
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	659a      	str	r2, [r3, #88]	; 0x58
 8000e34:	e007      	b.n	8000e46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e3e:	f023 0303 	bic.w	r3, r3, #3
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	aaaaaaab 	.word	0xaaaaaaab
 8000e5c:	08003e98 	.word	0x08003e98

08000e60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d11f      	bne.n	8000eba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d855      	bhi.n	8000f2c <DMA_CheckFifoParam+0xcc>
 8000e80:	a201      	add	r2, pc, #4	; (adr r2, 8000e88 <DMA_CheckFifoParam+0x28>)
 8000e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e86:	bf00      	nop
 8000e88:	08000e99 	.word	0x08000e99
 8000e8c:	08000eab 	.word	0x08000eab
 8000e90:	08000e99 	.word	0x08000e99
 8000e94:	08000f2d 	.word	0x08000f2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d045      	beq.n	8000f30 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ea8:	e042      	b.n	8000f30 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000eb2:	d13f      	bne.n	8000f34 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000eb8:	e03c      	b.n	8000f34 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ec2:	d121      	bne.n	8000f08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d836      	bhi.n	8000f38 <DMA_CheckFifoParam+0xd8>
 8000eca:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <DMA_CheckFifoParam+0x70>)
 8000ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed0:	08000ee1 	.word	0x08000ee1
 8000ed4:	08000ee7 	.word	0x08000ee7
 8000ed8:	08000ee1 	.word	0x08000ee1
 8000edc:	08000ef9 	.word	0x08000ef9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8000ee4:	e02f      	b.n	8000f46 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d024      	beq.n	8000f3c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ef6:	e021      	b.n	8000f3c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f00:	d11e      	bne.n	8000f40 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000f06:	e01b      	b.n	8000f40 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d902      	bls.n	8000f14 <DMA_CheckFifoParam+0xb4>
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d003      	beq.n	8000f1a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000f12:	e018      	b.n	8000f46 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
      break;
 8000f18:	e015      	b.n	8000f46 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00e      	beq.n	8000f44 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	73fb      	strb	r3, [r7, #15]
      break;
 8000f2a:	e00b      	b.n	8000f44 <DMA_CheckFifoParam+0xe4>
      break;
 8000f2c:	bf00      	nop
 8000f2e:	e00a      	b.n	8000f46 <DMA_CheckFifoParam+0xe6>
      break;
 8000f30:	bf00      	nop
 8000f32:	e008      	b.n	8000f46 <DMA_CheckFifoParam+0xe6>
      break;
 8000f34:	bf00      	nop
 8000f36:	e006      	b.n	8000f46 <DMA_CheckFifoParam+0xe6>
      break;
 8000f38:	bf00      	nop
 8000f3a:	e004      	b.n	8000f46 <DMA_CheckFifoParam+0xe6>
      break;
 8000f3c:	bf00      	nop
 8000f3e:	e002      	b.n	8000f46 <DMA_CheckFifoParam+0xe6>
      break;   
 8000f40:	bf00      	nop
 8000f42:	e000      	b.n	8000f46 <DMA_CheckFifoParam+0xe6>
      break;
 8000f44:	bf00      	nop
    }
  } 
  
  return status; 
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	e159      	b.n	8001224 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f040 8148 	bne.w	800121e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x4a>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b12      	cmp	r3, #18
 8000f9c:	d123      	bne.n	8000fe6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	08da      	lsrs	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3208      	adds	r2, #8
 8000fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	691a      	ldr	r2, [r3, #16]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	08da      	lsrs	r2, r3, #3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3208      	adds	r2, #8
 8000fe0:	69b9      	ldr	r1, [r7, #24]
 8000fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0203 	and.w	r2, r3, #3
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d00b      	beq.n	800103a <HAL_GPIO_Init+0xe6>
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d007      	beq.n	800103a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800102e:	2b11      	cmp	r3, #17
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b12      	cmp	r3, #18
 8001038:	d130      	bne.n	800109c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001070:	2201      	movs	r2, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	091b      	lsrs	r3, r3, #4
 8001086:	f003 0201 	and.w	r2, r3, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80a2 	beq.w	800121e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b56      	ldr	r3, [pc, #344]	; (8001238 <HAL_GPIO_Init+0x2e4>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a55      	ldr	r2, [pc, #340]	; (8001238 <HAL_GPIO_Init+0x2e4>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b53      	ldr	r3, [pc, #332]	; (8001238 <HAL_GPIO_Init+0x2e4>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f6:	4a51      	ldr	r2, [pc, #324]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a48      	ldr	r2, [pc, #288]	; (8001240 <HAL_GPIO_Init+0x2ec>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d019      	beq.n	8001156 <HAL_GPIO_Init+0x202>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a47      	ldr	r2, [pc, #284]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0x1fe>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a46      	ldr	r2, [pc, #280]	; (8001248 <HAL_GPIO_Init+0x2f4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00d      	beq.n	800114e <HAL_GPIO_Init+0x1fa>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a45      	ldr	r2, [pc, #276]	; (800124c <HAL_GPIO_Init+0x2f8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x1f6>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a44      	ldr	r2, [pc, #272]	; (8001250 <HAL_GPIO_Init+0x2fc>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x1f2>
 8001142:	2304      	movs	r3, #4
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001146:	2307      	movs	r3, #7
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x204>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x204>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4934      	ldr	r1, [pc, #208]	; (800123c <HAL_GPIO_Init+0x2e8>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001176:	4b37      	ldr	r3, [pc, #220]	; (8001254 <HAL_GPIO_Init+0x300>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800119a:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <HAL_GPIO_Init+0x300>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011a0:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <HAL_GPIO_Init+0x300>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c4:	4a23      	ldr	r2, [pc, #140]	; (8001254 <HAL_GPIO_Init+0x300>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <HAL_GPIO_Init+0x300>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ee:	4a19      	ldr	r2, [pc, #100]	; (8001254 <HAL_GPIO_Init+0x300>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_GPIO_Init+0x300>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001218:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_GPIO_Init+0x300>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f aea2 	bls.w	8000f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	3724      	adds	r7, #36	; 0x24
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	40023800 	.word	0x40023800
 800123c:	40013800 	.word	0x40013800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400
 8001248:	40020800 	.word	0x40020800
 800124c:	40020c00 	.word	0x40020c00
 8001250:	40021000 	.word	0x40021000
 8001254:	40013c00 	.word	0x40013c00

08001258 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691a      	ldr	r2, [r3, #16]
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d002      	beq.n	8001276 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e001      	b.n	800127a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a4:	e003      	b.n	80012ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	041a      	lsls	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e22d      	b.n	800172a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d075      	beq.n	80013c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012da:	4ba3      	ldr	r3, [pc, #652]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d00c      	beq.n	8001300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e6:	4ba0      	ldr	r3, [pc, #640]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d112      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f2:	4b9d      	ldr	r3, [pc, #628]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012fe:	d10b      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	4b99      	ldr	r3, [pc, #612]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d05b      	beq.n	80013c4 <HAL_RCC_OscConfig+0x108>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d157      	bne.n	80013c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e208      	b.n	800172a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001320:	d106      	bne.n	8001330 <HAL_RCC_OscConfig+0x74>
 8001322:	4b91      	ldr	r3, [pc, #580]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a90      	ldr	r2, [pc, #576]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01d      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x98>
 800133a:	4b8b      	ldr	r3, [pc, #556]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a8a      	ldr	r2, [pc, #552]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b88      	ldr	r3, [pc, #544]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a87      	ldr	r2, [pc, #540]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001354:	4b84      	ldr	r3, [pc, #528]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a83      	ldr	r2, [pc, #524]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800135a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b81      	ldr	r3, [pc, #516]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a80      	ldr	r2, [pc, #512]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff f916 	bl	80005a4 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff f912 	bl	80005a4 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e1cd      	b.n	800172a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b76      	ldr	r3, [pc, #472]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0xc0>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff f902 	bl	80005a4 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff f8fe 	bl	80005a4 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1b9      	b.n	800172a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	4b6c      	ldr	r3, [pc, #432]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0xe8>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d063      	beq.n	800149a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d2:	4b65      	ldr	r3, [pc, #404]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00b      	beq.n	80013f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013de:	4b62      	ldr	r3, [pc, #392]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d11c      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ea:	4b5f      	ldr	r3, [pc, #380]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d116      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	4b5c      	ldr	r3, [pc, #368]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e18d      	b.n	800172a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4b56      	ldr	r3, [pc, #344]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4952      	ldr	r1, [pc, #328]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	e03a      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142c:	4b4f      	ldr	r3, [pc, #316]	; (800156c <HAL_RCC_OscConfig+0x2b0>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff f8b7 	bl	80005a4 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff f8b3 	bl	80005a4 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e16e      	b.n	800172a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	4b46      	ldr	r3, [pc, #280]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b43      	ldr	r3, [pc, #268]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4940      	ldr	r1, [pc, #256]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <HAL_RCC_OscConfig+0x2b0>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff f896 	bl	80005a4 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff f892 	bl	80005a4 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e14d      	b.n	800172a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	4b36      	ldr	r3, [pc, #216]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d030      	beq.n	8001508 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d016      	beq.n	80014dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ae:	4b30      	ldr	r3, [pc, #192]	; (8001570 <HAL_RCC_OscConfig+0x2b4>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b4:	f7ff f876 	bl	80005a4 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff f872 	bl	80005a4 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e12d      	b.n	800172a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x200>
 80014da:	e015      	b.n	8001508 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_RCC_OscConfig+0x2b4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff f85f 	bl	80005a4 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ea:	f7ff f85b 	bl	80005a4 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e116      	b.n	800172a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80014fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f0      	bne.n	80014ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80a0 	beq.w	8001656 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10f      	bne.n	8001546 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001542:	2301      	movs	r3, #1
 8001544:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_RCC_OscConfig+0x2b8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154e:	2b00      	cmp	r3, #0
 8001550:	d121      	bne.n	8001596 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_RCC_OscConfig+0x2b8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a07      	ldr	r2, [pc, #28]	; (8001574 <HAL_RCC_OscConfig+0x2b8>)
 8001558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155e:	f7ff f821 	bl	80005a4 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001564:	e011      	b.n	800158a <HAL_RCC_OscConfig+0x2ce>
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	42470000 	.word	0x42470000
 8001570:	42470e80 	.word	0x42470e80
 8001574:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001578:	f7ff f814 	bl	80005a4 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e0cf      	b.n	800172a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158a:	4b6a      	ldr	r3, [pc, #424]	; (8001734 <HAL_RCC_OscConfig+0x478>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d106      	bne.n	80015ac <HAL_RCC_OscConfig+0x2f0>
 800159e:	4b66      	ldr	r3, [pc, #408]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	4a65      	ldr	r2, [pc, #404]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6713      	str	r3, [r2, #112]	; 0x70
 80015aa:	e01c      	b.n	80015e6 <HAL_RCC_OscConfig+0x32a>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d10c      	bne.n	80015ce <HAL_RCC_OscConfig+0x312>
 80015b4:	4b60      	ldr	r3, [pc, #384]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b8:	4a5f      	ldr	r2, [pc, #380]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6713      	str	r3, [r2, #112]	; 0x70
 80015c0:	4b5d      	ldr	r3, [pc, #372]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	4a5c      	ldr	r2, [pc, #368]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6713      	str	r3, [r2, #112]	; 0x70
 80015cc:	e00b      	b.n	80015e6 <HAL_RCC_OscConfig+0x32a>
 80015ce:	4b5a      	ldr	r3, [pc, #360]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	4a59      	ldr	r2, [pc, #356]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6713      	str	r3, [r2, #112]	; 0x70
 80015da:	4b57      	ldr	r3, [pc, #348]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015de:	4a56      	ldr	r2, [pc, #344]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 80015e0:	f023 0304 	bic.w	r3, r3, #4
 80015e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d015      	beq.n	800161a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ee:	f7fe ffd9 	bl	80005a4 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f4:	e00a      	b.n	800160c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f6:	f7fe ffd5 	bl	80005a4 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	f241 3288 	movw	r2, #5000	; 0x1388
 8001604:	4293      	cmp	r3, r2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e08e      	b.n	800172a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160c:	4b4a      	ldr	r3, [pc, #296]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0ee      	beq.n	80015f6 <HAL_RCC_OscConfig+0x33a>
 8001618:	e014      	b.n	8001644 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7fe ffc3 	bl	80005a4 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001620:	e00a      	b.n	8001638 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7fe ffbf 	bl	80005a4 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001630:	4293      	cmp	r3, r2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e078      	b.n	800172a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001638:	4b3f      	ldr	r3, [pc, #252]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1ee      	bne.n	8001622 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001644:	7dfb      	ldrb	r3, [r7, #23]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d105      	bne.n	8001656 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164a:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a3a      	ldr	r2, [pc, #232]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 8001650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d064      	beq.n	8001728 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165e:	4b36      	ldr	r3, [pc, #216]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b08      	cmp	r3, #8
 8001668:	d05c      	beq.n	8001724 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d141      	bne.n	80016f6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b32      	ldr	r3, [pc, #200]	; (800173c <HAL_RCC_OscConfig+0x480>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7fe ff94 	bl	80005a4 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7fe ff90 	bl	80005a4 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e04b      	b.n	800172a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	4b29      	ldr	r3, [pc, #164]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69da      	ldr	r2, [r3, #28]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	019b      	lsls	r3, r3, #6
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	3b01      	subs	r3, #1
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	061b      	lsls	r3, r3, #24
 80016c2:	491d      	ldr	r1, [pc, #116]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <HAL_RCC_OscConfig+0x480>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7fe ff69 	bl	80005a4 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d6:	f7fe ff65 	bl	80005a4 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e020      	b.n	800172a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x41a>
 80016f4:	e018      	b.n	8001728 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_RCC_OscConfig+0x480>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7fe ff52 	bl	80005a4 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001704:	f7fe ff4e 	bl	80005a4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e009      	b.n	800172a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <HAL_RCC_OscConfig+0x47c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x448>
 8001722:	e001      	b.n	8001728 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40007000 	.word	0x40007000
 8001738:	40023800 	.word	0x40023800
 800173c:	42470060 	.word	0x42470060

08001740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0ca      	b.n	80018ea <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4b67      	ldr	r3, [pc, #412]	; (80018f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d90c      	bls.n	800177c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b64      	ldr	r3, [pc, #400]	; (80018f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b62      	ldr	r3, [pc, #392]	; (80018f4 <HAL_RCC_ClockConfig+0x1b4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0b6      	b.n	80018ea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d020      	beq.n	80017ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001794:	4b58      	ldr	r3, [pc, #352]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a57      	ldr	r2, [pc, #348]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 800179a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800179e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ac:	4b52      	ldr	r3, [pc, #328]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a51      	ldr	r2, [pc, #324]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80017b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b8:	4b4f      	ldr	r3, [pc, #316]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	494c      	ldr	r1, [pc, #304]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d044      	beq.n	8001860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d119      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e07d      	b.n	80018ea <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d003      	beq.n	80017fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fe:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e06d      	b.n	80018ea <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e065      	b.n	80018ea <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f023 0203 	bic.w	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4933      	ldr	r1, [pc, #204]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001830:	f7fe feb8 	bl	80005a4 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	e00a      	b.n	800184e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7fe feb4 	bl	80005a4 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e04d      	b.n	80018ea <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 020c 	and.w	r2, r3, #12
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	429a      	cmp	r2, r3
 800185e:	d1eb      	bne.n	8001838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001860:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 030f 	and.w	r3, r3, #15
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d20c      	bcs.n	8001888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e030      	b.n	80018ea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001894:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4915      	ldr	r1, [pc, #84]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	490d      	ldr	r1, [pc, #52]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c6:	f000 f81d 	bl	8001904 <HAL_RCC_GetSysClockFreq>
 80018ca:	4601      	mov	r1, r0
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	4a09      	ldr	r2, [pc, #36]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	5cd3      	ldrb	r3, [r2, r3]
 80018da:	fa21 f303 	lsr.w	r3, r1, r3
 80018de:	4a08      	ldr	r2, [pc, #32]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 80018e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7fe fe1a 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023c00 	.word	0x40023c00
 80018f8:	40023800 	.word	0x40023800
 80018fc:	08003ea0 	.word	0x08003ea0
 8001900:	20000008 	.word	0x20000008

08001904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	2300      	movs	r3, #0
 8001914:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800191a:	4b50      	ldr	r3, [pc, #320]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x158>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b04      	cmp	r3, #4
 8001924:	d007      	beq.n	8001936 <HAL_RCC_GetSysClockFreq+0x32>
 8001926:	2b08      	cmp	r3, #8
 8001928:	d008      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x38>
 800192a:	2b00      	cmp	r3, #0
 800192c:	f040 808d 	bne.w	8001a4a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001930:	4b4b      	ldr	r3, [pc, #300]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001932:	60bb      	str	r3, [r7, #8]
       break;
 8001934:	e08c      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001936:	4b4b      	ldr	r3, [pc, #300]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x160>)
 8001938:	60bb      	str	r3, [r7, #8]
      break;
 800193a:	e089      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800193c:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x158>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001944:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001946:	4b45      	ldr	r3, [pc, #276]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x158>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d023      	beq.n	800199a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001952:	4b42      	ldr	r3, [pc, #264]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x158>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	099b      	lsrs	r3, r3, #6
 8001958:	f04f 0400 	mov.w	r4, #0
 800195c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	ea03 0501 	and.w	r5, r3, r1
 8001968:	ea04 0602 	and.w	r6, r4, r2
 800196c:	4a3d      	ldr	r2, [pc, #244]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x160>)
 800196e:	fb02 f106 	mul.w	r1, r2, r6
 8001972:	2200      	movs	r2, #0
 8001974:	fb02 f205 	mul.w	r2, r2, r5
 8001978:	440a      	add	r2, r1
 800197a:	493a      	ldr	r1, [pc, #232]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x160>)
 800197c:	fba5 0101 	umull	r0, r1, r5, r1
 8001980:	1853      	adds	r3, r2, r1
 8001982:	4619      	mov	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f04f 0400 	mov.w	r4, #0
 800198a:	461a      	mov	r2, r3
 800198c:	4623      	mov	r3, r4
 800198e:	f7fe fc23 	bl	80001d8 <__aeabi_uldivmod>
 8001992:	4603      	mov	r3, r0
 8001994:	460c      	mov	r4, r1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e049      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199a:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x158>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	099b      	lsrs	r3, r3, #6
 80019a0:	f04f 0400 	mov.w	r4, #0
 80019a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	ea03 0501 	and.w	r5, r3, r1
 80019b0:	ea04 0602 	and.w	r6, r4, r2
 80019b4:	4629      	mov	r1, r5
 80019b6:	4632      	mov	r2, r6
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	f04f 0400 	mov.w	r4, #0
 80019c0:	0154      	lsls	r4, r2, #5
 80019c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019c6:	014b      	lsls	r3, r1, #5
 80019c8:	4619      	mov	r1, r3
 80019ca:	4622      	mov	r2, r4
 80019cc:	1b49      	subs	r1, r1, r5
 80019ce:	eb62 0206 	sbc.w	r2, r2, r6
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	f04f 0400 	mov.w	r4, #0
 80019da:	0194      	lsls	r4, r2, #6
 80019dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019e0:	018b      	lsls	r3, r1, #6
 80019e2:	1a5b      	subs	r3, r3, r1
 80019e4:	eb64 0402 	sbc.w	r4, r4, r2
 80019e8:	f04f 0100 	mov.w	r1, #0
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	00e2      	lsls	r2, r4, #3
 80019f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019f6:	00d9      	lsls	r1, r3, #3
 80019f8:	460b      	mov	r3, r1
 80019fa:	4614      	mov	r4, r2
 80019fc:	195b      	adds	r3, r3, r5
 80019fe:	eb44 0406 	adc.w	r4, r4, r6
 8001a02:	f04f 0100 	mov.w	r1, #0
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	02a2      	lsls	r2, r4, #10
 8001a0c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a10:	0299      	lsls	r1, r3, #10
 8001a12:	460b      	mov	r3, r1
 8001a14:	4614      	mov	r4, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	4621      	mov	r1, r4
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f04f 0400 	mov.w	r4, #0
 8001a20:	461a      	mov	r2, r3
 8001a22:	4623      	mov	r3, r4
 8001a24:	f7fe fbd8 	bl	80001d8 <__aeabi_uldivmod>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x158>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	0c1b      	lsrs	r3, r3, #16
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	3301      	adds	r3, #1
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	60bb      	str	r3, [r7, #8]
      break;
 8001a48:	e002      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a4c:	60bb      	str	r3, [r7, #8]
      break;
 8001a4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a50:	68bb      	ldr	r3, [r7, #8]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	00f42400 	.word	0x00f42400
 8001a64:	017d7840 	.word	0x017d7840

08001a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008

08001a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a84:	f7ff fff0 	bl	8001a68 <HAL_RCC_GetHCLKFreq>
 8001a88:	4601      	mov	r1, r0
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	0a9b      	lsrs	r3, r3, #10
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	4a03      	ldr	r2, [pc, #12]	; (8001aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a96:	5cd3      	ldrb	r3, [r2, r3]
 8001a98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	08003eb0 	.word	0x08003eb0

08001aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001aac:	f7ff ffdc 	bl	8001a68 <HAL_RCC_GetHCLKFreq>
 8001ab0:	4601      	mov	r1, r0
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	0b5b      	lsrs	r3, r3, #13
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	4a03      	ldr	r2, [pc, #12]	; (8001acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001abe:	5cd3      	ldrb	r3, [r2, r3]
 8001ac0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	08003eb0 	.word	0x08003eb0

08001ad0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e01d      	b.n	8001b1e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f001 ffd6 	bl	8003aa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4610      	mov	r0, r2
 8001b10:	f000 f94e 	bl	8001db0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2201      	movs	r2, #1
 8001b38:	6839      	ldr	r1, [r7, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 fb44 	bl	80021c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a10      	ldr	r2, [pc, #64]	; (8001b88 <HAL_TIM_PWM_Start+0x60>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d107      	bne.n	8001b5a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b06      	cmp	r3, #6
 8001b6a:	d007      	beq.n	8001b7c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40010000 	.word	0x40010000

08001b8c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	6839      	ldr	r1, [r7, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 fb12 	bl	80021c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a1d      	ldr	r2, [pc, #116]	; (8001c20 <HAL_TIM_PWM_Stop+0x94>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d117      	bne.n	8001bde <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6a1a      	ldr	r2, [r3, #32]
 8001bb4:	f241 1311 	movw	r3, #4369	; 0x1111
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10f      	bne.n	8001bde <HAL_TIM_PWM_Stop+0x52>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a1a      	ldr	r2, [r3, #32]
 8001bc4:	f240 4344 	movw	r3, #1092	; 0x444
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d107      	bne.n	8001bde <HAL_TIM_PWM_Stop+0x52>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a1a      	ldr	r2, [r3, #32]
 8001be4:	f241 1311 	movw	r3, #4369	; 0x1111
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10f      	bne.n	8001c0e <HAL_TIM_PWM_Stop+0x82>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6a1a      	ldr	r2, [r3, #32]
 8001bf4:	f240 4344 	movw	r3, #1092	; 0x444
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d107      	bne.n	8001c0e <HAL_TIM_PWM_Stop+0x82>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40010000 	.word	0x40010000

08001c24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e0b4      	b.n	8001da8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0c      	cmp	r3, #12
 8001c52:	f200 809f 	bhi.w	8001d94 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001c56:	a201      	add	r2, pc, #4	; (adr r2, 8001c5c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5c:	08001c91 	.word	0x08001c91
 8001c60:	08001d95 	.word	0x08001d95
 8001c64:	08001d95 	.word	0x08001d95
 8001c68:	08001d95 	.word	0x08001d95
 8001c6c:	08001cd1 	.word	0x08001cd1
 8001c70:	08001d95 	.word	0x08001d95
 8001c74:	08001d95 	.word	0x08001d95
 8001c78:	08001d95 	.word	0x08001d95
 8001c7c:	08001d13 	.word	0x08001d13
 8001c80:	08001d95 	.word	0x08001d95
 8001c84:	08001d95 	.word	0x08001d95
 8001c88:	08001d95 	.word	0x08001d95
 8001c8c:	08001d53 	.word	0x08001d53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f90a 	bl	8001eb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0208 	orr.w	r2, r2, #8
 8001caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0204 	bic.w	r2, r2, #4
 8001cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6999      	ldr	r1, [r3, #24]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	619a      	str	r2, [r3, #24]
      break;
 8001cce:	e062      	b.n	8001d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f950 	bl	8001f7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6999      	ldr	r1, [r3, #24]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	021a      	lsls	r2, r3, #8
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	619a      	str	r2, [r3, #24]
      break;
 8001d10:	e041      	b.n	8001d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68b9      	ldr	r1, [r7, #8]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 f99b 	bl	8002054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	69da      	ldr	r2, [r3, #28]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0208 	orr.w	r2, r2, #8
 8001d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69da      	ldr	r2, [r3, #28]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0204 	bic.w	r2, r2, #4
 8001d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69d9      	ldr	r1, [r3, #28]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	61da      	str	r2, [r3, #28]
      break;
 8001d50:	e021      	b.n	8001d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 f9e5 	bl	8002128 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	69da      	ldr	r2, [r3, #28]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69da      	ldr	r2, [r3, #28]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	69d9      	ldr	r1, [r3, #28]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	021a      	lsls	r2, r3, #8
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	61da      	str	r2, [r3, #28]
      break;
 8001d92:	e000      	b.n	8001d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001d94:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a34      	ldr	r2, [pc, #208]	; (8001e94 <TIM_Base_SetConfig+0xe4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00f      	beq.n	8001de8 <TIM_Base_SetConfig+0x38>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dce:	d00b      	beq.n	8001de8 <TIM_Base_SetConfig+0x38>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a31      	ldr	r2, [pc, #196]	; (8001e98 <TIM_Base_SetConfig+0xe8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d007      	beq.n	8001de8 <TIM_Base_SetConfig+0x38>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a30      	ldr	r2, [pc, #192]	; (8001e9c <TIM_Base_SetConfig+0xec>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d003      	beq.n	8001de8 <TIM_Base_SetConfig+0x38>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a2f      	ldr	r2, [pc, #188]	; (8001ea0 <TIM_Base_SetConfig+0xf0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d108      	bne.n	8001dfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a25      	ldr	r2, [pc, #148]	; (8001e94 <TIM_Base_SetConfig+0xe4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01b      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e08:	d017      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a22      	ldr	r2, [pc, #136]	; (8001e98 <TIM_Base_SetConfig+0xe8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a21      	ldr	r2, [pc, #132]	; (8001e9c <TIM_Base_SetConfig+0xec>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00f      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a20      	ldr	r2, [pc, #128]	; (8001ea0 <TIM_Base_SetConfig+0xf0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00b      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a1f      	ldr	r2, [pc, #124]	; (8001ea4 <TIM_Base_SetConfig+0xf4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d007      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ea8 <TIM_Base_SetConfig+0xf8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d003      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <TIM_Base_SetConfig+0xfc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d108      	bne.n	8001e4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <TIM_Base_SetConfig+0xe4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d103      	bne.n	8001e80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	615a      	str	r2, [r3, #20]
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40010000 	.word	0x40010000
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40000800 	.word	0x40000800
 8001ea0:	40000c00 	.word	0x40000c00
 8001ea4:	40014000 	.word	0x40014000
 8001ea8:	40014400 	.word	0x40014400
 8001eac:	40014800 	.word	0x40014800

08001eb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	f023 0201 	bic.w	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f023 0303 	bic.w	r3, r3, #3
 8001ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f023 0302 	bic.w	r3, r3, #2
 8001ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <TIM_OC1_SetConfig+0xc8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d10c      	bne.n	8001f26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f023 0308 	bic.w	r3, r3, #8
 8001f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f023 0304 	bic.w	r3, r3, #4
 8001f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a13      	ldr	r2, [pc, #76]	; (8001f78 <TIM_OC1_SetConfig+0xc8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d111      	bne.n	8001f52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	621a      	str	r2, [r3, #32]
}
 8001f6c:	bf00      	nop
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	40010000 	.word	0x40010000

08001f7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	f023 0210 	bic.w	r2, r3, #16
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f023 0320 	bic.w	r3, r3, #32
 8001fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <TIM_OC2_SetConfig+0xd4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d10d      	bne.n	8001ff8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ff6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a15      	ldr	r2, [pc, #84]	; (8002050 <TIM_OC2_SetConfig+0xd4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d113      	bne.n	8002028 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002006:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800200e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	621a      	str	r2, [r3, #32]
}
 8002042:	bf00      	nop
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40010000 	.word	0x40010000

08002054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002054:	b480      	push	{r7}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f023 0303 	bic.w	r3, r3, #3
 800208a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800209c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <TIM_OC3_SetConfig+0xd0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10d      	bne.n	80020ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a14      	ldr	r2, [pc, #80]	; (8002124 <TIM_OC3_SetConfig+0xd0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d113      	bne.n	80020fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	621a      	str	r2, [r3, #32]
}
 8002118:	bf00      	nop
 800211a:	371c      	adds	r7, #28
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40010000 	.word	0x40010000

08002128 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800215e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4313      	orrs	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002172:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	031b      	lsls	r3, r3, #12
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <TIM_OC4_SetConfig+0x9c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d109      	bne.n	800219c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800218e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	019b      	lsls	r3, r3, #6
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	621a      	str	r2, [r3, #32]
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40010000 	.word	0x40010000

080021c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	2201      	movs	r2, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a1a      	ldr	r2, [r3, #32]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	401a      	ands	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a1a      	ldr	r2, [r3, #32]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	431a      	orrs	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	621a      	str	r2, [r3, #32]
}
 8002206:	bf00      	nop
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002226:	2302      	movs	r3, #2
 8002228:	e032      	b.n	8002290 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2202      	movs	r2, #2
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002250:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002262:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	4313      	orrs	r3, r2
 800226c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e03d      	b.n	8002334 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e03f      	b.n	80023d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f001 fc3a 	bl	8003be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2224      	movs	r2, #36	; 0x24
 8002370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 fb87 	bl	8002a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695a      	ldr	r2, [r3, #20]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	4613      	mov	r3, r2
 80023e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d166      	bne.n	80024c4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <HAL_UART_Receive_DMA+0x26>
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e05f      	b.n	80024c6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_UART_Receive_DMA+0x38>
 8002410:	2302      	movs	r3, #2
 8002412:	e058      	b.n	80024c6 <HAL_UART_Receive_DMA+0xea>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	88fa      	ldrh	r2, [r7, #6]
 8002426:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2222      	movs	r2, #34	; 0x22
 8002432:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243a:	4a25      	ldr	r2, [pc, #148]	; (80024d0 <HAL_UART_Receive_DMA+0xf4>)
 800243c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002442:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <HAL_UART_Receive_DMA+0xf8>)
 8002444:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244a:	4a23      	ldr	r2, [pc, #140]	; (80024d8 <HAL_UART_Receive_DMA+0xfc>)
 800244c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002452:	2200      	movs	r2, #0
 8002454:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8002456:	f107 0308 	add.w	r3, r7, #8
 800245a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3304      	adds	r3, #4
 8002466:	4619      	mov	r1, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	f7fe fa87 	bl	8000980 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800249e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024be:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	e000      	b.n	80024c6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80024c4:	2302      	movs	r3, #2
  }
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	08002711 	.word	0x08002711
 80024d4:	08002779 	.word	0x08002779
 80024d8:	08002795 	.word	0x08002795

080024dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10d      	bne.n	800252e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_UART_IRQHandler+0x52>
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fa34 	bl	8002994 <UART_Receive_IT>
      return;
 800252c:	e0cc      	b.n	80026c8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80ab 	beq.w	800268c <HAL_UART_IRQHandler+0x1b0>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <HAL_UART_IRQHandler+0x70>
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 80a0 	beq.w	800268c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_UART_IRQHandler+0x90>
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_UART_IRQHandler+0xb0>
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002584:	f043 0202 	orr.w	r2, r3, #2
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_UART_IRQHandler+0xd0>
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a4:	f043 0204 	orr.w	r2, r3, #4
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00a      	beq.n	80025cc <HAL_UART_IRQHandler+0xf0>
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c4:	f043 0208 	orr.w	r2, r3, #8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d078      	beq.n	80026c6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <HAL_UART_IRQHandler+0x112>
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f9d3 	bl	8002994 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	bf0c      	ite	eq
 80025fc:	2301      	moveq	r3, #1
 80025fe:	2300      	movne	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <HAL_UART_IRQHandler+0x13a>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d031      	beq.n	800267a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f91c 	bl	8002854 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002626:	2b40      	cmp	r3, #64	; 0x40
 8002628:	d123      	bne.n	8002672 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002638:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263e:	2b00      	cmp	r3, #0
 8002640:	d013      	beq.n	800266a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002646:	4a22      	ldr	r2, [pc, #136]	; (80026d0 <HAL_UART_IRQHandler+0x1f4>)
 8002648:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe f9f6 	bl	8000a40 <HAL_DMA_Abort_IT>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d016      	beq.n	8002688 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002664:	4610      	mov	r0, r2
 8002666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002668:	e00e      	b.n	8002688 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f846 	bl	80026fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002670:	e00a      	b.n	8002688 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f842 	bl	80026fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002678:	e006      	b.n	8002688 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f83e 	bl	80026fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002686:	e01e      	b.n	80026c6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002688:	bf00      	nop
    return;
 800268a:	e01c      	b.n	80026c6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_UART_IRQHandler+0x1cc>
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f909 	bl	80028b8 <UART_Transmit_IT>
    return;
 80026a6:	e00f      	b.n	80026c8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_UART_IRQHandler+0x1ec>
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f951 	bl	8002964 <UART_EndTransmit_IT>
    return;
 80026c2:	bf00      	nop
 80026c4:	e000      	b.n	80026c8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80026c6:	bf00      	nop
  }
}
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	08002891 	.word	0x08002891

080026d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d11e      	bne.n	800276a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002740:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0201 	bic.w	r2, r2, #1
 8002750:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002760:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 fe56 	bl	800341c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002784:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff ffae 	bl	80026e8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b0:	2b80      	cmp	r3, #128	; 0x80
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b21      	cmp	r3, #33	; 0x21
 80027c6:	d108      	bne.n	80027da <UART_DMAError+0x46>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2200      	movs	r2, #0
 80027d2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80027d4:	68b8      	ldr	r0, [r7, #8]
 80027d6:	f000 f827 	bl	8002828 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e4:	2b40      	cmp	r3, #64	; 0x40
 80027e6:	bf0c      	ite	eq
 80027e8:	2301      	moveq	r3, #1
 80027ea:	2300      	movne	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b22      	cmp	r3, #34	; 0x22
 80027fa:	d108      	bne.n	800280e <UART_DMAError+0x7a>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2200      	movs	r2, #0
 8002806:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002808:	68b8      	ldr	r0, [r7, #8]
 800280a:	f000 f823 	bl	8002854 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002812:	f043 0210 	orr.w	r2, r3, #16
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800281a:	68b8      	ldr	r0, [r7, #8]
 800281c:	f7ff ff6e 	bl	80026fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800283e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800286a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695a      	ldr	r2, [r3, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f7ff ff26 	bl	80026fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028b0:	bf00      	nop
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b21      	cmp	r3, #33	; 0x21
 80028ca:	d144      	bne.n	8002956 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d4:	d11a      	bne.n	800290c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028ea:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	1c9a      	adds	r2, r3, #2
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	621a      	str	r2, [r3, #32]
 80028fe:	e00e      	b.n	800291e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	621a      	str	r2, [r3, #32]
 800290a:	e008      	b.n	800291e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	1c59      	adds	r1, r3, #1
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6211      	str	r1, [r2, #32]
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29b      	uxth	r3, r3
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	4619      	mov	r1, r3
 800292c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10f      	bne.n	8002952 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002940:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002950:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	e000      	b.n	8002958 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002956:	2302      	movs	r3, #2
  }
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800297a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff fea5 	bl	80026d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b22      	cmp	r3, #34	; 0x22
 80029a6:	d171      	bne.n	8002a8c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b0:	d123      	bne.n	80029fa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10e      	bne.n	80029de <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	1c9a      	adds	r2, r3, #2
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	629a      	str	r2, [r3, #40]	; 0x28
 80029dc:	e029      	b.n	8002a32 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
 80029f8:	e01b      	b.n	8002a32 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6858      	ldr	r0, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	1c59      	adds	r1, r3, #1
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6291      	str	r1, [r2, #40]	; 0x28
 8002a12:	b2c2      	uxtb	r2, r0
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e00c      	b.n	8002a32 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	1c58      	adds	r0, r3, #1
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	6288      	str	r0, [r1, #40]	; 0x28
 8002a2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d120      	bne.n	8002a88 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0220 	bic.w	r2, r2, #32
 8002a54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fccc 	bl	800341c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e002      	b.n	8002a8e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
  }
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a98:	b5b0      	push	{r4, r5, r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ad8:	f023 030c 	bic.w	r3, r3, #12
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	68f9      	ldr	r1, [r7, #12]
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699a      	ldr	r2, [r3, #24]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b04:	f040 80e4 	bne.w	8002cd0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4aab      	ldr	r2, [pc, #684]	; (8002dbc <UART_SetConfig+0x324>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d004      	beq.n	8002b1c <UART_SetConfig+0x84>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4aaa      	ldr	r2, [pc, #680]	; (8002dc0 <UART_SetConfig+0x328>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d16c      	bne.n	8002bf6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002b1c:	f7fe ffc4 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8002b20:	4602      	mov	r2, r0
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	009a      	lsls	r2, r3, #2
 8002b2a:	441a      	add	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b36:	4aa3      	ldr	r2, [pc, #652]	; (8002dc4 <UART_SetConfig+0x32c>)
 8002b38:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	011c      	lsls	r4, r3, #4
 8002b40:	f7fe ffb2 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009a      	lsls	r2, r3, #2
 8002b4e:	441a      	add	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b5a:	f7fe ffa5 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	009a      	lsls	r2, r3, #2
 8002b68:	441a      	add	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b74:	4a93      	ldr	r2, [pc, #588]	; (8002dc4 <UART_SetConfig+0x32c>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	2264      	movs	r2, #100	; 0x64
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	1aeb      	subs	r3, r5, r3
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	3332      	adds	r3, #50	; 0x32
 8002b88:	4a8e      	ldr	r2, [pc, #568]	; (8002dc4 <UART_SetConfig+0x32c>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b96:	441c      	add	r4, r3
 8002b98:	f7fe ff86 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009a      	lsls	r2, r3, #2
 8002ba6:	441a      	add	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	fbb2 f5f3 	udiv	r5, r2, r3
 8002bb2:	f7fe ff79 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009a      	lsls	r2, r3, #2
 8002bc0:	441a      	add	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	4a7d      	ldr	r2, [pc, #500]	; (8002dc4 <UART_SetConfig+0x32c>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	2264      	movs	r2, #100	; 0x64
 8002bd6:	fb02 f303 	mul.w	r3, r2, r3
 8002bda:	1aeb      	subs	r3, r5, r3
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	3332      	adds	r3, #50	; 0x32
 8002be0:	4a78      	ldr	r2, [pc, #480]	; (8002dc4 <UART_SetConfig+0x32c>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	f003 0207 	and.w	r2, r3, #7
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4422      	add	r2, r4
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	e154      	b.n	8002ea0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bf6:	f7fe ff43 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	009a      	lsls	r2, r3, #2
 8002c04:	441a      	add	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c10:	4a6c      	ldr	r2, [pc, #432]	; (8002dc4 <UART_SetConfig+0x32c>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	011c      	lsls	r4, r3, #4
 8002c1a:	f7fe ff31 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009a      	lsls	r2, r3, #2
 8002c28:	441a      	add	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c34:	f7fe ff24 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	009a      	lsls	r2, r3, #2
 8002c42:	441a      	add	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	4a5d      	ldr	r2, [pc, #372]	; (8002dc4 <UART_SetConfig+0x32c>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	095b      	lsrs	r3, r3, #5
 8002c56:	2264      	movs	r2, #100	; 0x64
 8002c58:	fb02 f303 	mul.w	r3, r2, r3
 8002c5c:	1aeb      	subs	r3, r5, r3
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	3332      	adds	r3, #50	; 0x32
 8002c62:	4a58      	ldr	r2, [pc, #352]	; (8002dc4 <UART_SetConfig+0x32c>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c70:	441c      	add	r4, r3
 8002c72:	f7fe ff05 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002c76:	4602      	mov	r2, r0
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009a      	lsls	r2, r3, #2
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c8c:	f7fe fef8 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002c90:	4602      	mov	r2, r0
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	009a      	lsls	r2, r3, #2
 8002c9a:	441a      	add	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca6:	4a47      	ldr	r2, [pc, #284]	; (8002dc4 <UART_SetConfig+0x32c>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	2264      	movs	r2, #100	; 0x64
 8002cb0:	fb02 f303 	mul.w	r3, r2, r3
 8002cb4:	1aeb      	subs	r3, r5, r3
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	3332      	adds	r3, #50	; 0x32
 8002cba:	4a42      	ldr	r2, [pc, #264]	; (8002dc4 <UART_SetConfig+0x32c>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	f003 0207 	and.w	r2, r3, #7
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4422      	add	r2, r4
 8002ccc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002cce:	e0e7      	b.n	8002ea0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a39      	ldr	r2, [pc, #228]	; (8002dbc <UART_SetConfig+0x324>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d004      	beq.n	8002ce4 <UART_SetConfig+0x24c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a38      	ldr	r2, [pc, #224]	; (8002dc0 <UART_SetConfig+0x328>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d171      	bne.n	8002dc8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ce4:	f7fe fee0 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	009a      	lsls	r2, r3, #2
 8002cf2:	441a      	add	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfe:	4a31      	ldr	r2, [pc, #196]	; (8002dc4 <UART_SetConfig+0x32c>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	011c      	lsls	r4, r3, #4
 8002d08:	f7fe fece 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	009a      	lsls	r2, r3, #2
 8002d16:	441a      	add	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d22:	f7fe fec1 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8002d26:	4602      	mov	r2, r0
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009a      	lsls	r2, r3, #2
 8002d30:	441a      	add	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3c:	4a21      	ldr	r2, [pc, #132]	; (8002dc4 <UART_SetConfig+0x32c>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	2264      	movs	r2, #100	; 0x64
 8002d46:	fb02 f303 	mul.w	r3, r2, r3
 8002d4a:	1aeb      	subs	r3, r5, r3
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	3332      	adds	r3, #50	; 0x32
 8002d50:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <UART_SetConfig+0x32c>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d5c:	441c      	add	r4, r3
 8002d5e:	f7fe fea3 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8002d62:	4602      	mov	r2, r0
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	009a      	lsls	r2, r3, #2
 8002d6c:	441a      	add	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d78:	f7fe fe96 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	009a      	lsls	r2, r3, #2
 8002d86:	441a      	add	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d92:	4a0c      	ldr	r2, [pc, #48]	; (8002dc4 <UART_SetConfig+0x32c>)
 8002d94:	fba2 2303 	umull	r2, r3, r2, r3
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	2264      	movs	r2, #100	; 0x64
 8002d9c:	fb02 f303 	mul.w	r3, r2, r3
 8002da0:	1aeb      	subs	r3, r5, r3
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	3332      	adds	r3, #50	; 0x32
 8002da6:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <UART_SetConfig+0x32c>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	f003 020f 	and.w	r2, r3, #15
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4422      	add	r2, r4
 8002db8:	609a      	str	r2, [r3, #8]
 8002dba:	e071      	b.n	8002ea0 <UART_SetConfig+0x408>
 8002dbc:	40011000 	.word	0x40011000
 8002dc0:	40011400 	.word	0x40011400
 8002dc4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002dc8:	f7fe fe5a 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009a      	lsls	r2, r3, #2
 8002dd6:	441a      	add	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	4a31      	ldr	r2, [pc, #196]	; (8002ea8 <UART_SetConfig+0x410>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	011c      	lsls	r4, r3, #4
 8002dec:	f7fe fe48 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	009a      	lsls	r2, r3, #2
 8002dfa:	441a      	add	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e06:	f7fe fe3b 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	009a      	lsls	r2, r3, #2
 8002e14:	441a      	add	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e20:	4a21      	ldr	r2, [pc, #132]	; (8002ea8 <UART_SetConfig+0x410>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2264      	movs	r2, #100	; 0x64
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	1aeb      	subs	r3, r5, r3
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	3332      	adds	r3, #50	; 0x32
 8002e34:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <UART_SetConfig+0x410>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e40:	441c      	add	r4, r3
 8002e42:	f7fe fe1d 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002e46:	4602      	mov	r2, r0
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009a      	lsls	r2, r3, #2
 8002e50:	441a      	add	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e5c:	f7fe fe10 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002e60:	4602      	mov	r2, r0
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	009a      	lsls	r2, r3, #2
 8002e6a:	441a      	add	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e76:	4a0c      	ldr	r2, [pc, #48]	; (8002ea8 <UART_SetConfig+0x410>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	2264      	movs	r2, #100	; 0x64
 8002e80:	fb02 f303 	mul.w	r3, r2, r3
 8002e84:	1aeb      	subs	r3, r5, r3
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	3332      	adds	r3, #50	; 0x32
 8002e8a:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <UART_SetConfig+0x410>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	f003 020f 	and.w	r2, r3, #15
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4422      	add	r2, r4
 8002e9c:	609a      	str	r2, [r3, #8]
}
 8002e9e:	e7ff      	b.n	8002ea0 <UART_SetConfig+0x408>
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ea8:	51eb851f 	.word	0x51eb851f

08002eac <SystemClock_Config>:
  */
#include "Configuration.h"
#include "main.h"

void SystemClock_Config(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b094      	sub	sp, #80	; 0x50
 8002eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eb2:	f107 0320 	add.w	r3, r7, #32
 8002eb6:	2230      	movs	r2, #48	; 0x30
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 ffd8 	bl	8003e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ec0:	f107 030c 	add.w	r3, r7, #12
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <SystemClock_Config+0xb4>)
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <SystemClock_Config+0xb4>)
 8002eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ede:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <SystemClock_Config+0xb4>)
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eec:	2300      	movs	r3, #0
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <SystemClock_Config+0xb8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1b      	ldr	r2, [pc, #108]	; (8002f64 <SystemClock_Config+0xb8>)
 8002ef6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <SystemClock_Config+0xb8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f04:	607b      	str	r3, [r7, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f10:	2310      	movs	r3, #16
 8002f12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f18:	f107 0320 	add.w	r3, r7, #32
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe f9cd 	bl	80012bc <HAL_RCC_OscConfig>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002f28:	f000 f9ec 	bl	8003304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f2c:	230f      	movs	r3, #15
 8002f2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f40:	f107 030c 	add.w	r3, r7, #12
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fbfa 	bl	8001740 <HAL_RCC_ClockConfig>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002f52:	f000 f9d7 	bl	8003304 <Error_Handler>
  }
}
 8002f56:	bf00      	nop
 8002f58:	3750      	adds	r7, #80	; 0x50
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40007000 	.word	0x40007000

08002f68 <MX_TIM1_Init>:


void MX_TIM1_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b092      	sub	sp, #72	; 0x48
 8002f6c:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
 8002f88:	615a      	str	r2, [r3, #20]
 8002f8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	2220      	movs	r2, #32
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 ff6c 	bl	8003e70 <memset>

  htim1.Instance = TIM1;
 8002f98:	4b45      	ldr	r3, [pc, #276]	; (80030b0 <MX_TIM1_Init+0x148>)
 8002f9a:	4a46      	ldr	r2, [pc, #280]	; (80030b4 <MX_TIM1_Init+0x14c>)
 8002f9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600;
 8002f9e:	4b44      	ldr	r3, [pc, #272]	; (80030b0 <MX_TIM1_Init+0x148>)
 8002fa0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002fa4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fa6:	4b42      	ldr	r3, [pc, #264]	; (80030b0 <MX_TIM1_Init+0x148>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002fac:	4b40      	ldr	r3, [pc, #256]	; (80030b0 <MX_TIM1_Init+0x148>)
 8002fae:	2264      	movs	r2, #100	; 0x64
 8002fb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	; (80030b0 <MX_TIM1_Init+0x148>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fb8:	4b3d      	ldr	r3, [pc, #244]	; (80030b0 <MX_TIM1_Init+0x148>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fbe:	4b3c      	ldr	r3, [pc, #240]	; (80030b0 <MX_TIM1_Init+0x148>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002fc4:	483a      	ldr	r0, [pc, #232]	; (80030b0 <MX_TIM1_Init+0x148>)
 8002fc6:	f7fe fd83 	bl	8001ad0 <HAL_TIM_PWM_Init>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002fd0:	f000 f998 	bl	8003304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4833      	ldr	r0, [pc, #204]	; (80030b0 <MX_TIM1_Init+0x148>)
 8002fe4:	f7ff f915 	bl	8002212 <HAL_TIMEx_MasterConfigSynchronization>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002fee:	f000 f989 	bl	8003304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ff2:	2360      	movs	r3, #96	; 0x60
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ffe:	2300      	movs	r3, #0
 8003000:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003002:	2300      	movs	r3, #0
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800300a:	2300      	movs	r3, #0
 800300c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800300e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003012:	2200      	movs	r2, #0
 8003014:	4619      	mov	r1, r3
 8003016:	4826      	ldr	r0, [pc, #152]	; (80030b0 <MX_TIM1_Init+0x148>)
 8003018:	f7fe fe04 	bl	8001c24 <HAL_TIM_PWM_ConfigChannel>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8003022:	f000 f96f 	bl	8003304 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800302a:	2204      	movs	r2, #4
 800302c:	4619      	mov	r1, r3
 800302e:	4820      	ldr	r0, [pc, #128]	; (80030b0 <MX_TIM1_Init+0x148>)
 8003030:	f7fe fdf8 	bl	8001c24 <HAL_TIM_PWM_ConfigChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800303a:	f000 f963 	bl	8003304 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800303e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003042:	2208      	movs	r2, #8
 8003044:	4619      	mov	r1, r3
 8003046:	481a      	ldr	r0, [pc, #104]	; (80030b0 <MX_TIM1_Init+0x148>)
 8003048:	f7fe fdec 	bl	8001c24 <HAL_TIM_PWM_ConfigChannel>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8003052:	f000 f957 	bl	8003304 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305a:	220c      	movs	r2, #12
 800305c:	4619      	mov	r1, r3
 800305e:	4814      	ldr	r0, [pc, #80]	; (80030b0 <MX_TIM1_Init+0x148>)
 8003060:	f7fe fde0 	bl	8001c24 <HAL_TIM_PWM_ConfigChannel>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800306a:	f000 f94b 	bl	8003304 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003086:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003088:	2300      	movs	r3, #0
 800308a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	4619      	mov	r1, r3
 8003090:	4807      	ldr	r0, [pc, #28]	; (80030b0 <MX_TIM1_Init+0x148>)
 8003092:	f7ff f903 	bl	800229c <HAL_TIMEx_ConfigBreakDeadTime>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800309c:	f000 f932 	bl	8003304 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80030a0:	4803      	ldr	r0, [pc, #12]	; (80030b0 <MX_TIM1_Init+0x148>)
 80030a2:	f000 fd39 	bl	8003b18 <HAL_TIM_MspPostInit>
}
 80030a6:	bf00      	nop
 80030a8:	3748      	adds	r7, #72	; 0x48
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	200000f0 	.word	0x200000f0
 80030b4:	40010000 	.word	0x40010000

080030b8 <MX_TIM4_Init>:

void MX_TIM4_Init(void) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	; 0x28
 80030bc:	af00      	add	r7, sp, #0


  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030be:	f107 0320 	add.w	r3, r7, #32
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030c8:	1d3b      	adds	r3, r7, #4
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	609a      	str	r2, [r3, #8]
 80030d2:	60da      	str	r2, [r3, #12]
 80030d4:	611a      	str	r2, [r3, #16]
 80030d6:	615a      	str	r2, [r3, #20]
 80030d8:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80030da:	4b22      	ldr	r3, [pc, #136]	; (8003164 <MX_TIM4_Init+0xac>)
 80030dc:	4a22      	ldr	r2, [pc, #136]	; (8003168 <MX_TIM4_Init+0xb0>)
 80030de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1600;
 80030e0:	4b20      	ldr	r3, [pc, #128]	; (8003164 <MX_TIM4_Init+0xac>)
 80030e2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80030e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e8:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <MX_TIM4_Init+0xac>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80030ee:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <MX_TIM4_Init+0xac>)
 80030f0:	2264      	movs	r2, #100	; 0x64
 80030f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030f4:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <MX_TIM4_Init+0xac>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030fa:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <MX_TIM4_Init+0xac>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003100:	4818      	ldr	r0, [pc, #96]	; (8003164 <MX_TIM4_Init+0xac>)
 8003102:	f7fe fce5 	bl	8001ad0 <HAL_TIM_PWM_Init>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800310c:	f000 f8fa 	bl	8003304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003110:	2300      	movs	r3, #0
 8003112:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003118:	f107 0320 	add.w	r3, r7, #32
 800311c:	4619      	mov	r1, r3
 800311e:	4811      	ldr	r0, [pc, #68]	; (8003164 <MX_TIM4_Init+0xac>)
 8003120:	f7ff f877 	bl	8002212 <HAL_TIMEx_MasterConfigSynchronization>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800312a:	f000 f8eb 	bl	8003304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800312e:	2360      	movs	r3, #96	; 0x60
 8003130:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	2200      	movs	r2, #0
 8003142:	4619      	mov	r1, r3
 8003144:	4807      	ldr	r0, [pc, #28]	; (8003164 <MX_TIM4_Init+0xac>)
 8003146:	f7fe fd6d 	bl	8001c24 <HAL_TIM_PWM_ConfigChannel>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003150:	f000 f8d8 	bl	8003304 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim4);
 8003154:	4803      	ldr	r0, [pc, #12]	; (8003164 <MX_TIM4_Init+0xac>)
 8003156:	f000 fcdf 	bl	8003b18 <HAL_TIM_MspPostInit>

}
 800315a:	bf00      	nop
 800315c:	3728      	adds	r7, #40	; 0x28
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	200000a0 	.word	0x200000a0
 8003168:	40000800 	.word	0x40000800

0800316c <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void) {
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <MX_USART2_UART_Init+0x4c>)
 8003172:	4a12      	ldr	r2, [pc, #72]	; (80031bc <MX_USART2_UART_Init+0x50>)
 8003174:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <MX_USART2_UART_Init+0x4c>)
 8003178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800317c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800317e:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <MX_USART2_UART_Init+0x4c>)
 8003180:	2200      	movs	r2, #0
 8003182:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003184:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <MX_USART2_UART_Init+0x4c>)
 8003186:	2200      	movs	r2, #0
 8003188:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800318a:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <MX_USART2_UART_Init+0x4c>)
 800318c:	2200      	movs	r2, #0
 800318e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003190:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <MX_USART2_UART_Init+0x4c>)
 8003192:	220c      	movs	r2, #12
 8003194:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <MX_USART2_UART_Init+0x4c>)
 8003198:	2200      	movs	r2, #0
 800319a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <MX_USART2_UART_Init+0x4c>)
 800319e:	2200      	movs	r2, #0
 80031a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031a2:	4805      	ldr	r0, [pc, #20]	; (80031b8 <MX_USART2_UART_Init+0x4c>)
 80031a4:	f7ff f8cc 	bl	8002340 <HAL_UART_Init>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80031ae:	f000 f8a9 	bl	8003304 <Error_Handler>
  }
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000140 	.word	0x20000140
 80031bc:	40004400 	.word	0x40004400

080031c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	607b      	str	r3, [r7, #4]
 80031ca:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <MX_DMA_Init+0x3c>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4a0b      	ldr	r2, [pc, #44]	; (80031fc <MX_DMA_Init+0x3c>)
 80031d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031d4:	6313      	str	r3, [r2, #48]	; 0x30
 80031d6:	4b09      	ldr	r3, [pc, #36]	; (80031fc <MX_DMA_Init+0x3c>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031de:	607b      	str	r3, [r7, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	2100      	movs	r1, #0
 80031e6:	2010      	movs	r0, #16
 80031e8:	f7fd fae5 	bl	80007b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80031ec:	2010      	movs	r0, #16
 80031ee:	f7fd fafe 	bl	80007ee <HAL_NVIC_EnableIRQ>

}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800

08003200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08a      	sub	sp, #40	; 0x28
 8003204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003206:	f107 0314 	add.w	r3, r7, #20
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	60da      	str	r2, [r3, #12]
 8003214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <MX_GPIO_Init+0xf4>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4a35      	ldr	r2, [pc, #212]	; (80032f4 <MX_GPIO_Init+0xf4>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6313      	str	r3, [r2, #48]	; 0x30
 8003226:	4b33      	ldr	r3, [pc, #204]	; (80032f4 <MX_GPIO_Init+0xf4>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	4b2f      	ldr	r3, [pc, #188]	; (80032f4 <MX_GPIO_Init+0xf4>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a2e      	ldr	r2, [pc, #184]	; (80032f4 <MX_GPIO_Init+0xf4>)
 800323c:	f043 0310 	orr.w	r3, r3, #16
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
 8003242:	4b2c      	ldr	r3, [pc, #176]	; (80032f4 <MX_GPIO_Init+0xf4>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <MX_GPIO_Init+0xf4>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <MX_GPIO_Init+0xf4>)
 8003258:	f043 0308 	orr.w	r3, r3, #8
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <MX_GPIO_Init+0xf4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	607b      	str	r3, [r7, #4]
 800326e:	4b21      	ldr	r3, [pc, #132]	; (80032f4 <MX_GPIO_Init+0xf4>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	4a20      	ldr	r2, [pc, #128]	; (80032f4 <MX_GPIO_Init+0xf4>)
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	6313      	str	r3, [r2, #48]	; 0x30
 800327a:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <MX_GPIO_Init+0xf4>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	607b      	str	r3, [r7, #4]
 8003284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, M1_INB_Pin|M1_IN_Pin|M2_INB_Pin|M2_IN_Pin
 8003286:	2200      	movs	r2, #0
 8003288:	21f8      	movs	r1, #248	; 0xf8
 800328a:	481b      	ldr	r0, [pc, #108]	; (80032f8 <MX_GPIO_Init+0xf8>)
 800328c:	f7fd fffc 	bl	8001288 <HAL_GPIO_WritePin>
                          |M3_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_IN_Pin|M4_INB_Pin|M4_IN_Pin|M5_INB_Pin
 8003290:	2200      	movs	r2, #0
 8003292:	21f8      	movs	r1, #248	; 0xf8
 8003294:	4819      	ldr	r0, [pc, #100]	; (80032fc <MX_GPIO_Init+0xfc>)
 8003296:	f7fd fff7 	bl	8001288 <HAL_GPIO_WritePin>
                          |M5_IN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800329a:	2301      	movs	r3, #1
 800329c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80032a6:	f107 0314 	add.w	r3, r7, #20
 80032aa:	4619      	mov	r1, r3
 80032ac:	4814      	ldr	r0, [pc, #80]	; (8003300 <MX_GPIO_Init+0x100>)
 80032ae:	f7fd fe51 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_INB_Pin M1_IN_Pin M2_INB_Pin M2_IN_Pin
                           M3_INB_Pin */
  GPIO_InitStruct.Pin = M1_INB_Pin|M1_IN_Pin|M2_INB_Pin|M2_IN_Pin
 80032b2:	23f8      	movs	r3, #248	; 0xf8
 80032b4:	617b      	str	r3, [r7, #20]
                          |M3_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b6:	2301      	movs	r3, #1
 80032b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032be:	2300      	movs	r3, #0
 80032c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032c2:	f107 0314 	add.w	r3, r7, #20
 80032c6:	4619      	mov	r1, r3
 80032c8:	480b      	ldr	r0, [pc, #44]	; (80032f8 <MX_GPIO_Init+0xf8>)
 80032ca:	f7fd fe43 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_IN_Pin M4_INB_Pin M4_IN_Pin M5_INB_Pin
                           M5_IN_Pin */
  GPIO_InitStruct.Pin = M3_IN_Pin|M4_INB_Pin|M4_IN_Pin|M5_INB_Pin
 80032ce:	23f8      	movs	r3, #248	; 0xf8
 80032d0:	617b      	str	r3, [r7, #20]
                          |M5_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d2:	2301      	movs	r3, #1
 80032d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	2300      	movs	r3, #0
 80032dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032de:	f107 0314 	add.w	r3, r7, #20
 80032e2:	4619      	mov	r1, r3
 80032e4:	4805      	ldr	r0, [pc, #20]	; (80032fc <MX_GPIO_Init+0xfc>)
 80032e6:	f7fd fe35 	bl	8000f54 <HAL_GPIO_Init>
}
 80032ea:	bf00      	nop
 80032ec:	3728      	adds	r7, #40	; 0x28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
 80032f8:	40020c00 	.word	0x40020c00
 80032fc:	40020400 	.word	0x40020400
 8003300:	40020000 	.word	0x40020000

08003304 <Error_Handler>:
void Error_Handler(void){}
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
 8003308:	bf00      	nop
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <main>:
int result, color_xPos, color_yPos, QR_xPos, QR_yPos, error;
char Color, QR_Code, target_Color;
int color_xErr, color_yErr;

int main(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  // Microcontrollower set up
  HAL_Init();
 8003318:	f7fd f8de 	bl	80004d8 <HAL_Init>
  SystemClock_Config();
 800331c:	f7ff fdc6 	bl	8002eac <SystemClock_Config>
  MX_GPIO_Init();
 8003320:	f7ff ff6e 	bl	8003200 <MX_GPIO_Init>
  MX_DMA_Init();
 8003324:	f7ff ff4c 	bl	80031c0 <MX_DMA_Init>
  MX_TIM1_Init();
 8003328:	f7ff fe1e 	bl	8002f68 <MX_TIM1_Init>
  MX_TIM4_Init();
 800332c:	f7ff fec4 	bl	80030b8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8003330:	f7ff ff1c 	bl	800316c <MX_USART2_UART_Init>
  HAL_UART_Receive_DMA(&huart2, buffer, 14 );
 8003334:	220e      	movs	r2, #14
 8003336:	4922      	ldr	r1, [pc, #136]	; (80033c0 <main+0xac>)
 8003338:	4822      	ldr	r0, [pc, #136]	; (80033c4 <main+0xb0>)
 800333a:	f7ff f84f 	bl	80023dc <HAL_UART_Receive_DMA>

  while (1) {
    // Wait for User Button Press before running
    if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)) {
 800333e:	2101      	movs	r1, #1
 8003340:	4821      	ldr	r0, [pc, #132]	; (80033c8 <main+0xb4>)
 8003342:	f7fd ff89 	bl	8001258 <HAL_GPIO_ReadPin>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f8      	beq.n	800333e <main+0x2a>
      while (1){

        // Rotate the motor to the right until "Transport" QR Code is seen
        Horizontal_to_PickUpQRCode();
 800334c:	f000 fa08 	bl	8003760 <Horizontal_to_PickUpQRCode>
        HAL_Delay(1000);
 8003350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003354:	f7fd f932 	bl	80005bc <HAL_Delay>

        // Rotate Motor 3 down to find the colored object and center it.
        // Returns the color of the object
        target_Color = Vertical_to_Color();
 8003358:	f000 fabc 	bl	80038d4 <Vertical_to_Color>
 800335c:	4603      	mov	r3, r0
 800335e:	461a      	mov	r2, r3
 8003360:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <main+0xb8>)
 8003362:	701a      	strb	r2, [r3, #0]
        HAL_Delay(1000);
 8003364:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003368:	f7fd f928 	bl	80005bc <HAL_Delay>

        // Pick up the object
        CloseGripper();
 800336c:	f000 fb60 	bl	8003a30 <CloseGripper>

        // Rotate Motor 3 Vertically and center about previous QR code
        Vertical_to_QRCode();
 8003370:	f000 fa54 	bl	800381c <Vertical_to_QRCode>
        HAL_Delay(1000);
 8003374:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003378:	f7fd f920 	bl	80005bc <HAL_Delay>

        // Rotate the Robot left towards the target color QR Code
        Move_to_ColorQRCode(target_Color);
 800337c:	4b13      	ldr	r3, [pc, #76]	; (80033cc <main+0xb8>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f989 	bl	8003698 <Move_to_ColorQRCode>
        HAL_Delay(1000);
 8003386:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800338a:	f7fd f917 	bl	80005bc <HAL_Delay>

        // Lower Motor 3 for a 1.6 seconds
        Set_M3_Direction(-80);
 800338e:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8003392:	f000 f8e3 	bl	800355c <Set_M3_Direction>
        HAL_Delay(1600);
 8003396:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800339a:	f7fd f90f 	bl	80005bc <HAL_Delay>
        Set_M3_Direction(0);
 800339e:	2000      	movs	r0, #0
 80033a0:	f000 f8dc 	bl	800355c <Set_M3_Direction>
        HAL_Delay(1000);
 80033a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033a8:	f7fd f908 	bl	80005bc <HAL_Delay>

        // Drop the object
        OpenGripper();
 80033ac:	f000 fb2e 	bl	8003a0c <OpenGripper>

        // Move up to QR code
        Vertical_to_QRCode();
 80033b0:	f000 fa34 	bl	800381c <Vertical_to_QRCode>
        HAL_Delay(1000);
 80033b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033b8:	f7fd f900 	bl	80005bc <HAL_Delay>
        Horizontal_to_PickUpQRCode();
 80033bc:	e7c6      	b.n	800334c <main+0x38>
 80033be:	bf00      	nop
 80033c0:	20000028 	.word	0x20000028
 80033c4:	20000140 	.word	0x20000140
 80033c8:	40020000 	.word	0x40020000
 80033cc:	20000138 	.word	0x20000138

080033d0 <toInt>:
    }
  }
}
/* Convert the three digits into a integer value
Return: Returns the new integer value              */
int toInt(uint8_t digit_1, uint8_t digit_2, uint8_t digit_3){
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	71fb      	strb	r3, [r7, #7]
 80033da:	460b      	mov	r3, r1
 80033dc:	71bb      	strb	r3, [r7, #6]
 80033de:	4613      	mov	r3, r2
 80033e0:	717b      	strb	r3, [r7, #5]
	result = (digit_1 - 48)*100 + (digit_2 - 48)*10 + (digit_3 - 48);
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	3b30      	subs	r3, #48	; 0x30
 80033e6:	2264      	movs	r2, #100	; 0x64
 80033e8:	fb02 f103 	mul.w	r1, r2, r3
 80033ec:	79bb      	ldrb	r3, [r7, #6]
 80033ee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	18ca      	adds	r2, r1, r3
 80033fc:	797b      	ldrb	r3, [r7, #5]
 80033fe:	3b30      	subs	r3, #48	; 0x30
 8003400:	4413      	add	r3, r2
 8003402:	4a05      	ldr	r2, [pc, #20]	; (8003418 <toInt+0x48>)
 8003404:	6013      	str	r3, [r2, #0]
	return result;
 8003406:	4b04      	ldr	r3, [pc, #16]	; (8003418 <toInt+0x48>)
 8003408:	681b      	ldr	r3, [r3, #0]
}
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000134 	.word	0x20000134

0800341c <HAL_UART_RxCpltCallback>:

// Runs when a DMA USART process is complete. Process the data in the buffer and
// save it to the appropritate global variables
//
// Restart the DMA USART process again
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
	//Set the data to its corresponding variable
	Color = buffer[0];
 8003424:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_UART_RxCpltCallback+0x8c>)
 8003426:	781a      	ldrb	r2, [r3, #0]
 8003428:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_UART_RxCpltCallback+0x90>)
 800342a:	701a      	strb	r2, [r3, #0]
	color_xPos = toInt(buffer[1], buffer[2],buffer[3]);
 800342c:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <HAL_UART_RxCpltCallback+0x8c>)
 800342e:	7858      	ldrb	r0, [r3, #1]
 8003430:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_UART_RxCpltCallback+0x8c>)
 8003432:	7899      	ldrb	r1, [r3, #2]
 8003434:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <HAL_UART_RxCpltCallback+0x8c>)
 8003436:	78db      	ldrb	r3, [r3, #3]
 8003438:	461a      	mov	r2, r3
 800343a:	f7ff ffc9 	bl	80033d0 <toInt>
 800343e:	4602      	mov	r2, r0
 8003440:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <HAL_UART_RxCpltCallback+0x94>)
 8003442:	601a      	str	r2, [r3, #0]
	color_yPos = toInt(buffer[4], buffer[5],buffer[6]);
 8003444:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <HAL_UART_RxCpltCallback+0x8c>)
 8003446:	7918      	ldrb	r0, [r3, #4]
 8003448:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <HAL_UART_RxCpltCallback+0x8c>)
 800344a:	7959      	ldrb	r1, [r3, #5]
 800344c:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <HAL_UART_RxCpltCallback+0x8c>)
 800344e:	799b      	ldrb	r3, [r3, #6]
 8003450:	461a      	mov	r2, r3
 8003452:	f7ff ffbd 	bl	80033d0 <toInt>
 8003456:	4602      	mov	r2, r0
 8003458:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <HAL_UART_RxCpltCallback+0x98>)
 800345a:	601a      	str	r2, [r3, #0]
	QR_Code = buffer[7];
 800345c:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <HAL_UART_RxCpltCallback+0x8c>)
 800345e:	79da      	ldrb	r2, [r3, #7]
 8003460:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_UART_RxCpltCallback+0x9c>)
 8003462:	701a      	strb	r2, [r3, #0]
	QR_xPos = toInt(buffer[8], buffer[9],buffer[10]);
 8003464:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <HAL_UART_RxCpltCallback+0x8c>)
 8003466:	7a18      	ldrb	r0, [r3, #8]
 8003468:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <HAL_UART_RxCpltCallback+0x8c>)
 800346a:	7a59      	ldrb	r1, [r3, #9]
 800346c:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <HAL_UART_RxCpltCallback+0x8c>)
 800346e:	7a9b      	ldrb	r3, [r3, #10]
 8003470:	461a      	mov	r2, r3
 8003472:	f7ff ffad 	bl	80033d0 <toInt>
 8003476:	4602      	mov	r2, r0
 8003478:	4b10      	ldr	r3, [pc, #64]	; (80034bc <HAL_UART_RxCpltCallback+0xa0>)
 800347a:	601a      	str	r2, [r3, #0]
	QR_yPos = toInt(buffer[11], buffer[12],buffer[13]);
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_UART_RxCpltCallback+0x8c>)
 800347e:	7ad8      	ldrb	r0, [r3, #11]
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_UART_RxCpltCallback+0x8c>)
 8003482:	7b19      	ldrb	r1, [r3, #12]
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <HAL_UART_RxCpltCallback+0x8c>)
 8003486:	7b5b      	ldrb	r3, [r3, #13]
 8003488:	461a      	mov	r2, r3
 800348a:	f7ff ffa1 	bl	80033d0 <toInt>
 800348e:	4602      	mov	r2, r0
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_UART_RxCpltCallback+0xa4>)
 8003492:	601a      	str	r2, [r3, #0]

	//Restart the DMA Process to read Serial Data
	HAL_UART_Receive_DMA(&huart2, buffer, 14);
 8003494:	220e      	movs	r2, #14
 8003496:	4904      	ldr	r1, [pc, #16]	; (80034a8 <HAL_UART_RxCpltCallback+0x8c>)
 8003498:	480a      	ldr	r0, [pc, #40]	; (80034c4 <HAL_UART_RxCpltCallback+0xa8>)
 800349a:	f7fe ff9f 	bl	80023dc <HAL_UART_Receive_DMA>
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000028 	.word	0x20000028
 80034ac:	20000184 	.word	0x20000184
 80034b0:	200000e8 	.word	0x200000e8
 80034b4:	200000e4 	.word	0x200000e4
 80034b8:	200000e0 	.word	0x200000e0
 80034bc:	200000ec 	.word	0x200000ec
 80034c0:	20000130 	.word	0x20000130
 80034c4:	20000140 	.word	0x20000140

080034c8 <Set_M1_Direction>:
// Input: Integer value between -100 to 1000
// Conditions:
//    speed < 0 : the joint rotates to the left
//    speed > 0 : the joint rotates to the right
//    speed == 0: the joint stops moving
void Set_M1_Direction(int speed) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	uint8_t dutycycle;
	if(abs(speed) < 20){
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f113 0f13 	cmn.w	r3, #19
 80034d6:	db07      	blt.n	80034e8 <Set_M1_Direction+0x20>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b13      	cmp	r3, #19
 80034dc:	dc04      	bgt.n	80034e8 <Set_M1_Direction+0x20>

		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80034de:	2100      	movs	r1, #0
 80034e0:	481b      	ldr	r0, [pc, #108]	; (8003550 <Set_M1_Direction+0x88>)
 80034e2:	f7fe fb53 	bl	8001b8c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
		HAL_GPIO_WritePin(M1_IN_GPIO_Port, M1_IN_Pin, 0);
		HAL_GPIO_WritePin(M1_INB_GPIO_Port, M1_INB_Pin, 1);

	}
}
 80034e6:	e02f      	b.n	8003548 <Set_M1_Direction+0x80>
	} else if (speed < 0){
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	da16      	bge.n	800351c <Set_M1_Direction+0x54>
		dutycycle = abs(speed);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bfb8      	it	lt
 80034f4:	425b      	neglt	r3, r3
 80034f6:	73fb      	strb	r3, [r7, #15]
		TIM4->CCR1 = dutycycle;
 80034f8:	4a16      	ldr	r2, [pc, #88]	; (8003554 <Set_M1_Direction+0x8c>)
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80034fe:	2100      	movs	r1, #0
 8003500:	4813      	ldr	r0, [pc, #76]	; (8003550 <Set_M1_Direction+0x88>)
 8003502:	f7fe fb11 	bl	8001b28 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(M1_IN_GPIO_Port, M1_IN_Pin, 1);
 8003506:	2201      	movs	r2, #1
 8003508:	2110      	movs	r1, #16
 800350a:	4813      	ldr	r0, [pc, #76]	; (8003558 <Set_M1_Direction+0x90>)
 800350c:	f7fd febc 	bl	8001288 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_INB_GPIO_Port, M1_INB_Pin, 0);
 8003510:	2200      	movs	r2, #0
 8003512:	2108      	movs	r1, #8
 8003514:	4810      	ldr	r0, [pc, #64]	; (8003558 <Set_M1_Direction+0x90>)
 8003516:	f7fd feb7 	bl	8001288 <HAL_GPIO_WritePin>
}
 800351a:	e015      	b.n	8003548 <Set_M1_Direction+0x80>
		dutycycle = abs(speed);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	bfb8      	it	lt
 8003522:	425b      	neglt	r3, r3
 8003524:	73fb      	strb	r3, [r7, #15]
		TIM4->CCR1 = dutycycle;
 8003526:	4a0b      	ldr	r2, [pc, #44]	; (8003554 <Set_M1_Direction+0x8c>)
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800352c:	2100      	movs	r1, #0
 800352e:	4808      	ldr	r0, [pc, #32]	; (8003550 <Set_M1_Direction+0x88>)
 8003530:	f7fe fafa 	bl	8001b28 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(M1_IN_GPIO_Port, M1_IN_Pin, 0);
 8003534:	2200      	movs	r2, #0
 8003536:	2110      	movs	r1, #16
 8003538:	4807      	ldr	r0, [pc, #28]	; (8003558 <Set_M1_Direction+0x90>)
 800353a:	f7fd fea5 	bl	8001288 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_INB_GPIO_Port, M1_INB_Pin, 1);
 800353e:	2201      	movs	r2, #1
 8003540:	2108      	movs	r1, #8
 8003542:	4805      	ldr	r0, [pc, #20]	; (8003558 <Set_M1_Direction+0x90>)
 8003544:	f7fd fea0 	bl	8001288 <HAL_GPIO_WritePin>
}
 8003548:	bf00      	nop
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	200000a0 	.word	0x200000a0
 8003554:	40000800 	.word	0x40000800
 8003558:	40020c00 	.word	0x40020c00

0800355c <Set_M3_Direction>:
// Input: Integer value between -100 to 1000
// Conditions:
//    speed < 0 : the joint rotates down
//    speed > 0 : the joint rotates up
//    speed == 0: the joint stops moving
void Set_M3_Direction(int speed) {
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	uint8_t dutycycle;
	if(abs(speed) < 20){
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f113 0f13 	cmn.w	r3, #19
 800356a:	db07      	blt.n	800357c <Set_M3_Direction+0x20>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b13      	cmp	r3, #19
 8003570:	dc04      	bgt.n	800357c <Set_M3_Direction+0x20>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8003572:	2108      	movs	r1, #8
 8003574:	481d      	ldr	r0, [pc, #116]	; (80035ec <Set_M3_Direction+0x90>)
 8003576:	f7fe fb09 	bl	8001b8c <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(M3_IN_GPIO_Port, M3_IN_Pin, 0);
		HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, 1);

	}

}
 800357a:	e032      	b.n	80035e2 <Set_M3_Direction+0x86>
	} else if(speed < 0){
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	da16      	bge.n	80035b0 <Set_M3_Direction+0x54>
		dutycycle = abs(speed);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	bfb8      	it	lt
 8003588:	425b      	neglt	r3, r3
 800358a:	73fb      	strb	r3, [r7, #15]
		TIM1->CCR3 = dutycycle;
 800358c:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <Set_M3_Direction+0x94>)
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	63d3      	str	r3, [r2, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003592:	2108      	movs	r1, #8
 8003594:	4815      	ldr	r0, [pc, #84]	; (80035ec <Set_M3_Direction+0x90>)
 8003596:	f7fe fac7 	bl	8001b28 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(M3_IN_GPIO_Port, M3_IN_Pin, 1);
 800359a:	2201      	movs	r2, #1
 800359c:	2108      	movs	r1, #8
 800359e:	4815      	ldr	r0, [pc, #84]	; (80035f4 <Set_M3_Direction+0x98>)
 80035a0:	f7fd fe72 	bl	8001288 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, 0);
 80035a4:	2200      	movs	r2, #0
 80035a6:	2180      	movs	r1, #128	; 0x80
 80035a8:	4813      	ldr	r0, [pc, #76]	; (80035f8 <Set_M3_Direction+0x9c>)
 80035aa:	f7fd fe6d 	bl	8001288 <HAL_GPIO_WritePin>
}
 80035ae:	e018      	b.n	80035e2 <Set_M3_Direction+0x86>
	} else if(speed > 0){
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	dd15      	ble.n	80035e2 <Set_M3_Direction+0x86>
		dutycycle = abs(speed);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bfb8      	it	lt
 80035bc:	425b      	neglt	r3, r3
 80035be:	73fb      	strb	r3, [r7, #15]
		TIM1->CCR3 = dutycycle;
 80035c0:	4a0b      	ldr	r2, [pc, #44]	; (80035f0 <Set_M3_Direction+0x94>)
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	63d3      	str	r3, [r2, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80035c6:	2108      	movs	r1, #8
 80035c8:	4808      	ldr	r0, [pc, #32]	; (80035ec <Set_M3_Direction+0x90>)
 80035ca:	f7fe faad 	bl	8001b28 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(M3_IN_GPIO_Port, M3_IN_Pin, 0);
 80035ce:	2200      	movs	r2, #0
 80035d0:	2108      	movs	r1, #8
 80035d2:	4808      	ldr	r0, [pc, #32]	; (80035f4 <Set_M3_Direction+0x98>)
 80035d4:	f7fd fe58 	bl	8001288 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, 1);
 80035d8:	2201      	movs	r2, #1
 80035da:	2180      	movs	r1, #128	; 0x80
 80035dc:	4806      	ldr	r0, [pc, #24]	; (80035f8 <Set_M3_Direction+0x9c>)
 80035de:	f7fd fe53 	bl	8001288 <HAL_GPIO_WritePin>
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200000f0 	.word	0x200000f0
 80035f0:	40010000 	.word	0x40010000
 80035f4:	40020400 	.word	0x40020400
 80035f8:	40020c00 	.word	0x40020c00

080035fc <Set_M5_Direction>:
// Conditions:
//    speed < 0 : the joint rotates down
//    speed > 0 : the joint rotates up
//    speed == 0: the joint stops moving
void Set_M5_Direction(int speed)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	uint8_t dutycycle;
	if(abs(speed) < 20){
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f113 0f13 	cmn.w	r3, #19
 800360a:	db07      	blt.n	800361c <Set_M5_Direction+0x20>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b13      	cmp	r3, #19
 8003610:	dc04      	bgt.n	800361c <Set_M5_Direction+0x20>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8003612:	2100      	movs	r1, #0
 8003614:	481d      	ldr	r0, [pc, #116]	; (800368c <Set_M5_Direction+0x90>)
 8003616:	f7fe fab9 	bl	8001b8c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
		HAL_GPIO_WritePin(M5_IN_GPIO_Port, M5_IN_Pin, 0);
		HAL_GPIO_WritePin(M5_INB_GPIO_Port, M5_INB_Pin, 1);

	}
}
 800361a:	e032      	b.n	8003682 <Set_M5_Direction+0x86>
	} else if(speed < 0){
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	da16      	bge.n	8003650 <Set_M5_Direction+0x54>
		dutycycle = abs(speed);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	bfb8      	it	lt
 8003628:	425b      	neglt	r3, r3
 800362a:	73fb      	strb	r3, [r7, #15]
		TIM1->CCR1 = dutycycle;
 800362c:	4a18      	ldr	r2, [pc, #96]	; (8003690 <Set_M5_Direction+0x94>)
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003632:	2100      	movs	r1, #0
 8003634:	4815      	ldr	r0, [pc, #84]	; (800368c <Set_M5_Direction+0x90>)
 8003636:	f7fe fa77 	bl	8001b28 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(M5_IN_GPIO_Port, M5_IN_Pin, 1);
 800363a:	2201      	movs	r2, #1
 800363c:	2180      	movs	r1, #128	; 0x80
 800363e:	4815      	ldr	r0, [pc, #84]	; (8003694 <Set_M5_Direction+0x98>)
 8003640:	f7fd fe22 	bl	8001288 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M5_INB_GPIO_Port, M5_INB_Pin, 0);
 8003644:	2200      	movs	r2, #0
 8003646:	2140      	movs	r1, #64	; 0x40
 8003648:	4812      	ldr	r0, [pc, #72]	; (8003694 <Set_M5_Direction+0x98>)
 800364a:	f7fd fe1d 	bl	8001288 <HAL_GPIO_WritePin>
}
 800364e:	e018      	b.n	8003682 <Set_M5_Direction+0x86>
	} else if(speed > 0){
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	dd15      	ble.n	8003682 <Set_M5_Direction+0x86>
		dutycycle = abs(speed);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	bfb8      	it	lt
 800365c:	425b      	neglt	r3, r3
 800365e:	73fb      	strb	r3, [r7, #15]
		TIM1->CCR1 = dutycycle;
 8003660:	4a0b      	ldr	r2, [pc, #44]	; (8003690 <Set_M5_Direction+0x94>)
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003666:	2100      	movs	r1, #0
 8003668:	4808      	ldr	r0, [pc, #32]	; (800368c <Set_M5_Direction+0x90>)
 800366a:	f7fe fa5d 	bl	8001b28 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(M5_IN_GPIO_Port, M5_IN_Pin, 0);
 800366e:	2200      	movs	r2, #0
 8003670:	2180      	movs	r1, #128	; 0x80
 8003672:	4808      	ldr	r0, [pc, #32]	; (8003694 <Set_M5_Direction+0x98>)
 8003674:	f7fd fe08 	bl	8001288 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M5_INB_GPIO_Port, M5_INB_Pin, 1);
 8003678:	2201      	movs	r2, #1
 800367a:	2140      	movs	r1, #64	; 0x40
 800367c:	4805      	ldr	r0, [pc, #20]	; (8003694 <Set_M5_Direction+0x98>)
 800367e:	f7fd fe03 	bl	8001288 <HAL_GPIO_WritePin>
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	200000f0 	.word	0x200000f0
 8003690:	40010000 	.word	0x40010000
 8003694:	40020400 	.word	0x40020400

08003698 <Move_to_ColorQRCode>:
// This function is hard coded to rotate the motor left while checking the QR Decoded message.
// It will center the camera at the target QR Code, i.e. either Red, Yellow or Green.
void Move_to_ColorQRCode(char target){
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	71fb      	strb	r3, [r7, #7]
	while(1){
    // Check if the QR Code on camera is not the target
		if(QR_Code != target){
 80036a2:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <Move_to_ColorQRCode+0xbc>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	79fa      	ldrb	r2, [r7, #7]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d00f      	beq.n	80036cc <Move_to_ColorQRCode+0x34>
      // Keep rotating towards the left
			Set_M1_Direction(-80);
 80036ac:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 80036b0:	f7ff ff0a 	bl	80034c8 <Set_M1_Direction>
			HAL_Delay(300);
 80036b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80036b8:	f7fc ff80 	bl	80005bc <HAL_Delay>
			Set_M1_Direction(0);
 80036bc:	2000      	movs	r0, #0
 80036be:	f7ff ff03 	bl	80034c8 <Set_M1_Direction>
			HAL_Delay(350);
 80036c2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80036c6:	f7fc ff79 	bl	80005bc <HAL_Delay>
 80036ca:	e7ea      	b.n	80036a2 <Move_to_ColorQRCode+0xa>

		} else{
			// When the target QRCode is seen, attempt to center at x axis value 320
			// Loop will center about the x-axis
			while(1){
				error = QR_xPos - 320;
 80036cc:	4b22      	ldr	r3, [pc, #136]	; (8003758 <Move_to_ColorQRCode+0xc0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80036d4:	4a21      	ldr	r2, [pc, #132]	; (800375c <Move_to_ColorQRCode+0xc4>)
 80036d6:	6013      	str	r3, [r2, #0]
        // Once it is within 20 pixels of the center, stop and exit loop
				if(abs(error) < 20){
 80036d8:	4b20      	ldr	r3, [pc, #128]	; (800375c <Move_to_ColorQRCode+0xc4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f113 0f13 	cmn.w	r3, #19
 80036e0:	db13      	blt.n	800370a <Move_to_ColorQRCode+0x72>
 80036e2:	4b1e      	ldr	r3, [pc, #120]	; (800375c <Move_to_ColorQRCode+0xc4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b13      	cmp	r3, #19
 80036e8:	dc0f      	bgt.n	800370a <Move_to_ColorQRCode+0x72>

					Set_M1_Direction(0);
 80036ea:	2000      	movs	r0, #0
 80036ec:	f7ff feec 	bl	80034c8 <Set_M1_Direction>
					HAL_Delay(300);
 80036f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80036f4:	f7fc ff62 	bl	80005bc <HAL_Delay>
					break;
 80036f8:	bf00      	nop
					HAL_Delay(300);

				}
			}
      //exit main loop
			Set_M1_Direction(0);
 80036fa:	2000      	movs	r0, #0
 80036fc:	f7ff fee4 	bl	80034c8 <Set_M1_Direction>
			HAL_Delay(300);
 8003700:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003704:	f7fc ff5a 	bl	80005bc <HAL_Delay>
			break;
 8003708:	e020      	b.n	800374c <Move_to_ColorQRCode+0xb4>
				} else if(error < 0) {
 800370a:	4b14      	ldr	r3, [pc, #80]	; (800375c <Move_to_ColorQRCode+0xc4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	da0e      	bge.n	8003730 <Move_to_ColorQRCode+0x98>
					Set_M1_Direction(-60);
 8003712:	f06f 003b 	mvn.w	r0, #59	; 0x3b
 8003716:	f7ff fed7 	bl	80034c8 <Set_M1_Direction>
					HAL_Delay(90);
 800371a:	205a      	movs	r0, #90	; 0x5a
 800371c:	f7fc ff4e 	bl	80005bc <HAL_Delay>
					Set_M1_Direction(0);
 8003720:	2000      	movs	r0, #0
 8003722:	f7ff fed1 	bl	80034c8 <Set_M1_Direction>
					HAL_Delay(300);
 8003726:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800372a:	f7fc ff47 	bl	80005bc <HAL_Delay>
 800372e:	e7cd      	b.n	80036cc <Move_to_ColorQRCode+0x34>
					Set_M1_Direction(60);
 8003730:	203c      	movs	r0, #60	; 0x3c
 8003732:	f7ff fec9 	bl	80034c8 <Set_M1_Direction>
					HAL_Delay(90);
 8003736:	205a      	movs	r0, #90	; 0x5a
 8003738:	f7fc ff40 	bl	80005bc <HAL_Delay>
					Set_M1_Direction(0);
 800373c:	2000      	movs	r0, #0
 800373e:	f7ff fec3 	bl	80034c8 <Set_M1_Direction>
					HAL_Delay(300);
 8003742:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003746:	f7fc ff39 	bl	80005bc <HAL_Delay>
				error = QR_xPos - 320;
 800374a:	e7bf      	b.n	80036cc <Move_to_ColorQRCode+0x34>
		}
	}
}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	200000e0 	.word	0x200000e0
 8003758:	200000ec 	.word	0x200000ec
 800375c:	2000013c 	.word	0x2000013c

08003760 <Horizontal_to_PickUpQRCode>:
// This function is hard coded to rotate the motor to the right while checking the QR Decoded message.
// It will center the camera at the "Transport" QR Code.
void Horizontal_to_PickUpQRCode(){
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
	while(1){
      // Check if the QR Code on camera is not the target
			if(QR_Code != 'T'){
 8003764:	4b2a      	ldr	r3, [pc, #168]	; (8003810 <Horizontal_to_PickUpQRCode+0xb0>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b54      	cmp	r3, #84	; 0x54
 800376a:	d00e      	beq.n	800378a <Horizontal_to_PickUpQRCode+0x2a>
        // Keep rotating to the right
				Set_M1_Direction(80);
 800376c:	2050      	movs	r0, #80	; 0x50
 800376e:	f7ff feab 	bl	80034c8 <Set_M1_Direction>
				HAL_Delay(300);
 8003772:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003776:	f7fc ff21 	bl	80005bc <HAL_Delay>
				Set_M1_Direction(0);
 800377a:	2000      	movs	r0, #0
 800377c:	f7ff fea4 	bl	80034c8 <Set_M1_Direction>
				HAL_Delay(500);
 8003780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003784:	f7fc ff1a 	bl	80005bc <HAL_Delay>
 8003788:	e7ec      	b.n	8003764 <Horizontal_to_PickUpQRCode+0x4>

			} else{
        // When the "Transport" QRCode is seen, attempt to center at x axis value 320
				// Loop will center about the x-axis
				while(1){
					error = QR_xPos - 320;
 800378a:	4b22      	ldr	r3, [pc, #136]	; (8003814 <Horizontal_to_PickUpQRCode+0xb4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003792:	4a21      	ldr	r2, [pc, #132]	; (8003818 <Horizontal_to_PickUpQRCode+0xb8>)
 8003794:	6013      	str	r3, [r2, #0]
          // Once it is within 20 pixels of the center, stop and exit loop
					if(abs(error) < 20){
 8003796:	4b20      	ldr	r3, [pc, #128]	; (8003818 <Horizontal_to_PickUpQRCode+0xb8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f113 0f13 	cmn.w	r3, #19
 800379e:	db13      	blt.n	80037c8 <Horizontal_to_PickUpQRCode+0x68>
 80037a0:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <Horizontal_to_PickUpQRCode+0xb8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b13      	cmp	r3, #19
 80037a6:	dc0f      	bgt.n	80037c8 <Horizontal_to_PickUpQRCode+0x68>

						Set_M1_Direction(0);
 80037a8:	2000      	movs	r0, #0
 80037aa:	f7ff fe8d 	bl	80034c8 <Set_M1_Direction>
						HAL_Delay(300);
 80037ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80037b2:	f7fc ff03 	bl	80005bc <HAL_Delay>
						break;
 80037b6:	bf00      	nop
						HAL_Delay(300);

					}
				}
        //exit main loop
				Set_M1_Direction(0);
 80037b8:	2000      	movs	r0, #0
 80037ba:	f7ff fe85 	bl	80034c8 <Set_M1_Direction>
				HAL_Delay(300);
 80037be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80037c2:	f7fc fefb 	bl	80005bc <HAL_Delay>
				break;
 80037c6:	e020      	b.n	800380a <Horizontal_to_PickUpQRCode+0xaa>
					} else if(error < 0) {
 80037c8:	4b13      	ldr	r3, [pc, #76]	; (8003818 <Horizontal_to_PickUpQRCode+0xb8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	da0e      	bge.n	80037ee <Horizontal_to_PickUpQRCode+0x8e>
						Set_M1_Direction(-60);
 80037d0:	f06f 003b 	mvn.w	r0, #59	; 0x3b
 80037d4:	f7ff fe78 	bl	80034c8 <Set_M1_Direction>
						HAL_Delay(50);
 80037d8:	2032      	movs	r0, #50	; 0x32
 80037da:	f7fc feef 	bl	80005bc <HAL_Delay>
						Set_M1_Direction(0);
 80037de:	2000      	movs	r0, #0
 80037e0:	f7ff fe72 	bl	80034c8 <Set_M1_Direction>
						HAL_Delay(300);
 80037e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80037e8:	f7fc fee8 	bl	80005bc <HAL_Delay>
 80037ec:	e7cd      	b.n	800378a <Horizontal_to_PickUpQRCode+0x2a>
						Set_M1_Direction(60);
 80037ee:	203c      	movs	r0, #60	; 0x3c
 80037f0:	f7ff fe6a 	bl	80034c8 <Set_M1_Direction>
						HAL_Delay(50);
 80037f4:	2032      	movs	r0, #50	; 0x32
 80037f6:	f7fc fee1 	bl	80005bc <HAL_Delay>
						Set_M1_Direction(0);
 80037fa:	2000      	movs	r0, #0
 80037fc:	f7ff fe64 	bl	80034c8 <Set_M1_Direction>
						HAL_Delay(300);
 8003800:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003804:	f7fc feda 	bl	80005bc <HAL_Delay>
					error = QR_xPos - 320;
 8003808:	e7bf      	b.n	800378a <Horizontal_to_PickUpQRCode+0x2a>
			}
		}
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	200000e0 	.word	0x200000e0
 8003814:	200000ec 	.word	0x200000ec
 8003818:	2000013c 	.word	0x2000013c

0800381c <Vertical_to_QRCode>:
// This function is hard coded to rotate Motor 3 upwards while checking to detect a QR Code.
// Centers the object counter about the line y = 130
void Vertical_to_QRCode(){
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
	while(1){
    //The if statement only executes when a QR Code is in the camera frame.
		if(QR_Code != 'N'){
 8003820:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <Vertical_to_QRCode+0xac>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b4e      	cmp	r3, #78	; 0x4e
 8003826:	d03f      	beq.n	80038a8 <Vertical_to_QRCode+0x8c>

			while(1){
				error = 130 - QR_yPos;
 8003828:	4b28      	ldr	r3, [pc, #160]	; (80038cc <Vertical_to_QRCode+0xb0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f1c3 0382 	rsb	r3, r3, #130	; 0x82
 8003830:	4a27      	ldr	r2, [pc, #156]	; (80038d0 <Vertical_to_QRCode+0xb4>)
 8003832:	6013      	str	r3, [r2, #0]
				if(abs(error) < 10){
 8003834:	4b26      	ldr	r3, [pc, #152]	; (80038d0 <Vertical_to_QRCode+0xb4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f113 0f09 	cmn.w	r3, #9
 800383c:	db13      	blt.n	8003866 <Vertical_to_QRCode+0x4a>
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <Vertical_to_QRCode+0xb4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b09      	cmp	r3, #9
 8003844:	dc0f      	bgt.n	8003866 <Vertical_to_QRCode+0x4a>
          // When error is within 10 pixels of 130, stop motor and exit loop
					Set_M3_Direction(0);
 8003846:	2000      	movs	r0, #0
 8003848:	f7ff fe88 	bl	800355c <Set_M3_Direction>
					HAL_Delay(300);
 800384c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003850:	f7fc feb4 	bl	80005bc <HAL_Delay>
					break;
 8003854:	bf00      	nop
					Set_M3_Direction(0);
					HAL_Delay(300);

				}
			}
			Set_M1_Direction(0);
 8003856:	2000      	movs	r0, #0
 8003858:	f7ff fe36 	bl	80034c8 <Set_M1_Direction>
			HAL_Delay(300);
 800385c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003860:	f7fc feac 	bl	80005bc <HAL_Delay>
			break;
 8003864:	e02e      	b.n	80038c4 <Vertical_to_QRCode+0xa8>
				} else if(error < 0) {
 8003866:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <Vertical_to_QRCode+0xb4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	da0e      	bge.n	800388c <Vertical_to_QRCode+0x70>
					Set_M3_Direction(-50);
 800386e:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8003872:	f7ff fe73 	bl	800355c <Set_M3_Direction>
					HAL_Delay(75);
 8003876:	204b      	movs	r0, #75	; 0x4b
 8003878:	f7fc fea0 	bl	80005bc <HAL_Delay>
					Set_M3_Direction(0);
 800387c:	2000      	movs	r0, #0
 800387e:	f7ff fe6d 	bl	800355c <Set_M3_Direction>
					HAL_Delay(300);
 8003882:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003886:	f7fc fe99 	bl	80005bc <HAL_Delay>
 800388a:	e7cd      	b.n	8003828 <Vertical_to_QRCode+0xc>
					Set_M3_Direction(80);
 800388c:	2050      	movs	r0, #80	; 0x50
 800388e:	f7ff fe65 	bl	800355c <Set_M3_Direction>
					HAL_Delay(100);
 8003892:	2064      	movs	r0, #100	; 0x64
 8003894:	f7fc fe92 	bl	80005bc <HAL_Delay>
					Set_M3_Direction(0);
 8003898:	2000      	movs	r0, #0
 800389a:	f7ff fe5f 	bl	800355c <Set_M3_Direction>
					HAL_Delay(300);
 800389e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80038a2:	f7fc fe8b 	bl	80005bc <HAL_Delay>
				error = 130 - QR_yPos;
 80038a6:	e7bf      	b.n	8003828 <Vertical_to_QRCode+0xc>

		} else {
      // Keep rotating upwards when no QR Code is in frame.
			Set_M3_Direction(100);
 80038a8:	2064      	movs	r0, #100	; 0x64
 80038aa:	f7ff fe57 	bl	800355c <Set_M3_Direction>
			HAL_Delay(200);
 80038ae:	20c8      	movs	r0, #200	; 0xc8
 80038b0:	f7fc fe84 	bl	80005bc <HAL_Delay>
			Set_M3_Direction(0);
 80038b4:	2000      	movs	r0, #0
 80038b6:	f7ff fe51 	bl	800355c <Set_M3_Direction>
			HAL_Delay(300);
 80038ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80038be:	f7fc fe7d 	bl	80005bc <HAL_Delay>
		if(QR_Code != 'N'){
 80038c2:	e7ad      	b.n	8003820 <Vertical_to_QRCode+0x4>

		}
	}
}
 80038c4:	bf00      	nop
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	200000e0 	.word	0x200000e0
 80038cc:	20000130 	.word	0x20000130
 80038d0:	2000013c 	.word	0x2000013c

080038d4 <Vertical_to_Color>:
// This function is hard coded to rotate Motor 3 down while checking to detected a Red, Green, or Yellow object.
// Centers the object counter about the point (320,400)
// Returns: The color of the object detected
char Vertical_to_Color(){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0

	while(1){
    // When object is detected, the if statement executes to center the contour about (320,400)
		if(Color != 'N'){
 80038d8:	4b47      	ldr	r3, [pc, #284]	; (80039f8 <Vertical_to_Color+0x124>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b4e      	cmp	r3, #78	; 0x4e
 80038de:	d077      	beq.n	80039d0 <Vertical_to_Color+0xfc>
			// Center y position at 390-410
			while(1){
				color_yErr = 400 - color_yPos;
 80038e0:	4b46      	ldr	r3, [pc, #280]	; (80039fc <Vertical_to_Color+0x128>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 80038e8:	4a45      	ldr	r2, [pc, #276]	; (8003a00 <Vertical_to_Color+0x12c>)
 80038ea:	6013      	str	r3, [r2, #0]
				if(abs(color_yErr) < 10){
 80038ec:	4b44      	ldr	r3, [pc, #272]	; (8003a00 <Vertical_to_Color+0x12c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f113 0f09 	cmn.w	r3, #9
 80038f4:	db0b      	blt.n	800390e <Vertical_to_Color+0x3a>
 80038f6:	4b42      	ldr	r3, [pc, #264]	; (8003a00 <Vertical_to_Color+0x12c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b09      	cmp	r3, #9
 80038fc:	dc07      	bgt.n	800390e <Vertical_to_Color+0x3a>
          // When error within 10 pixels of 400, stop motor and exit loop
					Set_M3_Direction(0);
 80038fe:	2000      	movs	r0, #0
 8003900:	f7ff fe2c 	bl	800355c <Set_M3_Direction>
					HAL_Delay(300);
 8003904:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003908:	f7fc fe58 	bl	80005bc <HAL_Delay>
					break;
 800390c:	e020      	b.n	8003950 <Vertical_to_Color+0x7c>

				} else if(color_yErr < 0) {
 800390e:	4b3c      	ldr	r3, [pc, #240]	; (8003a00 <Vertical_to_Color+0x12c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	da0e      	bge.n	8003934 <Vertical_to_Color+0x60>
          // When error is negative, rotate Motor 3 down.
					Set_M3_Direction(-50);
 8003916:	f06f 0031 	mvn.w	r0, #49	; 0x31
 800391a:	f7ff fe1f 	bl	800355c <Set_M3_Direction>
					HAL_Delay(75);
 800391e:	204b      	movs	r0, #75	; 0x4b
 8003920:	f7fc fe4c 	bl	80005bc <HAL_Delay>
					Set_M3_Direction(0);
 8003924:	2000      	movs	r0, #0
 8003926:	f7ff fe19 	bl	800355c <Set_M3_Direction>
					HAL_Delay(300);
 800392a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800392e:	f7fc fe45 	bl	80005bc <HAL_Delay>
 8003932:	e7d5      	b.n	80038e0 <Vertical_to_Color+0xc>

				} else {
          // When error is positive, rotate Motor 3 up.
					Set_M3_Direction(80);
 8003934:	2050      	movs	r0, #80	; 0x50
 8003936:	f7ff fe11 	bl	800355c <Set_M3_Direction>
					HAL_Delay(100);
 800393a:	2064      	movs	r0, #100	; 0x64
 800393c:	f7fc fe3e 	bl	80005bc <HAL_Delay>
					Set_M3_Direction(0);
 8003940:	2000      	movs	r0, #0
 8003942:	f7ff fe0b 	bl	800355c <Set_M3_Direction>
					HAL_Delay(300);
 8003946:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800394a:	f7fc fe37 	bl	80005bc <HAL_Delay>
				color_yErr = 400 - color_yPos;
 800394e:	e7c7      	b.n	80038e0 <Vertical_to_Color+0xc>

				}
			}
			// Center x position at 320
			while(1){
				color_xErr = color_xPos - 320;
 8003950:	4b2c      	ldr	r3, [pc, #176]	; (8003a04 <Vertical_to_Color+0x130>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003958:	4a2b      	ldr	r2, [pc, #172]	; (8003a08 <Vertical_to_Color+0x134>)
 800395a:	6013      	str	r3, [r2, #0]
				if(abs(color_xErr) < 10){
 800395c:	4b2a      	ldr	r3, [pc, #168]	; (8003a08 <Vertical_to_Color+0x134>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f113 0f09 	cmn.w	r3, #9
 8003964:	db13      	blt.n	800398e <Vertical_to_Color+0xba>
 8003966:	4b28      	ldr	r3, [pc, #160]	; (8003a08 <Vertical_to_Color+0x134>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b09      	cmp	r3, #9
 800396c:	dc0f      	bgt.n	800398e <Vertical_to_Color+0xba>
          // When error within 10 pixels of 400, stop motor and exit loop
					Set_M1_Direction(0);
 800396e:	2000      	movs	r0, #0
 8003970:	f7ff fdaa 	bl	80034c8 <Set_M1_Direction>
					HAL_Delay(300);
 8003974:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003978:	f7fc fe20 	bl	80005bc <HAL_Delay>
					break;
 800397c:	bf00      	nop
					Set_M1_Direction(0);
					HAL_Delay(300);

				}
			}
			Set_M1_Direction(0);
 800397e:	2000      	movs	r0, #0
 8003980:	f7ff fda2 	bl	80034c8 <Set_M1_Direction>
			HAL_Delay(300);
 8003984:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003988:	f7fc fe18 	bl	80005bc <HAL_Delay>
			break;
 800398c:	e02f      	b.n	80039ee <Vertical_to_Color+0x11a>
				} else if(color_xErr < 0) {
 800398e:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <Vertical_to_Color+0x134>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	da0e      	bge.n	80039b4 <Vertical_to_Color+0xe0>
					Set_M1_Direction(-60);
 8003996:	f06f 003b 	mvn.w	r0, #59	; 0x3b
 800399a:	f7ff fd95 	bl	80034c8 <Set_M1_Direction>
					HAL_Delay(75);
 800399e:	204b      	movs	r0, #75	; 0x4b
 80039a0:	f7fc fe0c 	bl	80005bc <HAL_Delay>
					Set_M1_Direction(0);
 80039a4:	2000      	movs	r0, #0
 80039a6:	f7ff fd8f 	bl	80034c8 <Set_M1_Direction>
					HAL_Delay(300);
 80039aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80039ae:	f7fc fe05 	bl	80005bc <HAL_Delay>
 80039b2:	e7cd      	b.n	8003950 <Vertical_to_Color+0x7c>
					Set_M1_Direction(60);
 80039b4:	203c      	movs	r0, #60	; 0x3c
 80039b6:	f7ff fd87 	bl	80034c8 <Set_M1_Direction>
					HAL_Delay(50);
 80039ba:	2032      	movs	r0, #50	; 0x32
 80039bc:	f7fc fdfe 	bl	80005bc <HAL_Delay>
					Set_M1_Direction(0);
 80039c0:	2000      	movs	r0, #0
 80039c2:	f7ff fd81 	bl	80034c8 <Set_M1_Direction>
					HAL_Delay(300);
 80039c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80039ca:	f7fc fdf7 	bl	80005bc <HAL_Delay>
				color_xErr = color_xPos - 320;
 80039ce:	e7bf      	b.n	8003950 <Vertical_to_Color+0x7c>

		} else {
      // While no object is detected, keep rotating down
			Set_M3_Direction(-60);
 80039d0:	f06f 003b 	mvn.w	r0, #59	; 0x3b
 80039d4:	f7ff fdc2 	bl	800355c <Set_M3_Direction>
			HAL_Delay(100);
 80039d8:	2064      	movs	r0, #100	; 0x64
 80039da:	f7fc fdef 	bl	80005bc <HAL_Delay>
			Set_M3_Direction(0);
 80039de:	2000      	movs	r0, #0
 80039e0:	f7ff fdbc 	bl	800355c <Set_M3_Direction>
			HAL_Delay(300);
 80039e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80039e8:	f7fc fde8 	bl	80005bc <HAL_Delay>
		if(Color != 'N'){
 80039ec:	e774      	b.n	80038d8 <Vertical_to_Color+0x4>

		}
	}
	return Color;
 80039ee:	4b02      	ldr	r3, [pc, #8]	; (80039f8 <Vertical_to_Color+0x124>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000184 	.word	0x20000184
 80039fc:	200000e4 	.word	0x200000e4
 8003a00:	2000009c 	.word	0x2000009c
 8003a04:	200000e8 	.word	0x200000e8
 8003a08:	20000180 	.word	0x20000180

08003a0c <OpenGripper>:
// Energize motor 5 to opem the gripper. Moving the gripper for 500 milliseconds
// was enough delay to open the gripper to a fully-open position.
void OpenGripper(){
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0

  Set_M5_Direction(60);
 8003a10:	203c      	movs	r0, #60	; 0x3c
 8003a12:	f7ff fdf3 	bl	80035fc <Set_M5_Direction>
  HAL_Delay(500);
 8003a16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a1a:	f7fc fdcf 	bl	80005bc <HAL_Delay>
  Set_M5_Direction(0);
 8003a1e:	2000      	movs	r0, #0
 8003a20:	f7ff fdec 	bl	80035fc <Set_M5_Direction>
  HAL_Delay(1000);
 8003a24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a28:	f7fc fdc8 	bl	80005bc <HAL_Delay>

}
 8003a2c:	bf00      	nop
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <CloseGripper>:

// Energize motor 5 to close the gripper. Moving the gripper for 510 milliseconds
// was enough delay to close and hold the object.
void CloseGripper(){
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0

  Set_M5_Direction(-70);
 8003a34:	f06f 0045 	mvn.w	r0, #69	; 0x45
 8003a38:	f7ff fde0 	bl	80035fc <Set_M5_Direction>
  HAL_Delay(510);
 8003a3c:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 8003a40:	f7fc fdbc 	bl	80005bc <HAL_Delay>
  Set_M5_Direction(0);
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7ff fdd9 	bl	80035fc <Set_M5_Direction>
  HAL_Delay(1000);
 8003a4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a4e:	f7fc fdb5 	bl	80005bc <HAL_Delay>

}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	4a0f      	ldr	r2, [pc, #60]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	4a08      	ldr	r2, [pc, #32]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a88:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8a:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40023800 	.word	0x40023800

08003aa8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <HAL_TIM_PWM_MspInit+0x64>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10e      	bne.n	8003ad8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <HAL_TIM_PWM_MspInit+0x68>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <HAL_TIM_PWM_MspInit+0x68>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aca:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <HAL_TIM_PWM_MspInit+0x68>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003ad6:	e012      	b.n	8003afe <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0d      	ldr	r2, [pc, #52]	; (8003b14 <HAL_TIM_PWM_MspInit+0x6c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d10d      	bne.n	8003afe <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <HAL_TIM_PWM_MspInit+0x68>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	4a09      	ldr	r2, [pc, #36]	; (8003b10 <HAL_TIM_PWM_MspInit+0x68>)
 8003aec:	f043 0304 	orr.w	r3, r3, #4
 8003af0:	6413      	str	r3, [r2, #64]	; 0x40
 8003af2:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <HAL_TIM_PWM_MspInit+0x68>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	68bb      	ldr	r3, [r7, #8]
}
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	40023800 	.word	0x40023800
 8003b14:	40000800 	.word	0x40000800

08003b18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a25      	ldr	r2, [pc, #148]	; (8003bcc <HAL_TIM_MspPostInit+0xb4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d11f      	bne.n	8003b7a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	4b24      	ldr	r3, [pc, #144]	; (8003bd0 <HAL_TIM_MspPostInit+0xb8>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	4a23      	ldr	r2, [pc, #140]	; (8003bd0 <HAL_TIM_MspPostInit+0xb8>)
 8003b44:	f043 0310 	orr.w	r3, r3, #16
 8003b48:	6313      	str	r3, [r2, #48]	; 0x30
 8003b4a:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <HAL_TIM_MspPostInit+0xb8>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = M5_PWM_Pin|M4_PWM_Pin|M3_PWM_Pin|M2_PWM_Pin;
 8003b56:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b64:	2300      	movs	r3, #0
 8003b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b6c:	f107 0314 	add.w	r3, r7, #20
 8003b70:	4619      	mov	r1, r3
 8003b72:	4818      	ldr	r0, [pc, #96]	; (8003bd4 <HAL_TIM_MspPostInit+0xbc>)
 8003b74:	f7fd f9ee 	bl	8000f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003b78:	e023      	b.n	8003bc2 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a16      	ldr	r2, [pc, #88]	; (8003bd8 <HAL_TIM_MspPostInit+0xc0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d11e      	bne.n	8003bc2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <HAL_TIM_MspPostInit+0xb8>)
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	4a10      	ldr	r2, [pc, #64]	; (8003bd0 <HAL_TIM_MspPostInit+0xb8>)
 8003b8e:	f043 0308 	orr.w	r3, r3, #8
 8003b92:	6313      	str	r3, [r2, #48]	; 0x30
 8003b94:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <HAL_TIM_MspPostInit+0xb8>)
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PWM_Pin;
 8003ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003bb6:	f107 0314 	add.w	r3, r7, #20
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4807      	ldr	r0, [pc, #28]	; (8003bdc <HAL_TIM_MspPostInit+0xc4>)
 8003bbe:	f7fd f9c9 	bl	8000f54 <HAL_GPIO_Init>
}
 8003bc2:	bf00      	nop
 8003bc4:	3728      	adds	r7, #40	; 0x28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40010000 	.word	0x40010000
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40000800 	.word	0x40000800
 8003bdc:	40020c00 	.word	0x40020c00

08003be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	609a      	str	r2, [r3, #8]
 8003bf4:	60da      	str	r2, [r3, #12]
 8003bf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a34      	ldr	r2, [pc, #208]	; (8003cd0 <HAL_UART_MspInit+0xf0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d161      	bne.n	8003cc6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	4b33      	ldr	r3, [pc, #204]	; (8003cd4 <HAL_UART_MspInit+0xf4>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	4a32      	ldr	r2, [pc, #200]	; (8003cd4 <HAL_UART_MspInit+0xf4>)
 8003c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c10:	6413      	str	r3, [r2, #64]	; 0x40
 8003c12:	4b30      	ldr	r3, [pc, #192]	; (8003cd4 <HAL_UART_MspInit+0xf4>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <HAL_UART_MspInit+0xf4>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	4a2b      	ldr	r2, [pc, #172]	; (8003cd4 <HAL_UART_MspInit+0xf4>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2e:	4b29      	ldr	r3, [pc, #164]	; (8003cd4 <HAL_UART_MspInit+0xf4>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c3a:	230c      	movs	r3, #12
 8003c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c42:	2301      	movs	r3, #1
 8003c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c46:	2303      	movs	r3, #3
 8003c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c4a:	2307      	movs	r3, #7
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4e:	f107 0314 	add.w	r3, r7, #20
 8003c52:	4619      	mov	r1, r3
 8003c54:	4820      	ldr	r0, [pc, #128]	; (8003cd8 <HAL_UART_MspInit+0xf8>)
 8003c56:	f7fd f97d 	bl	8000f54 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003c5a:	4b20      	ldr	r3, [pc, #128]	; (8003cdc <HAL_UART_MspInit+0xfc>)
 8003c5c:	4a20      	ldr	r2, [pc, #128]	; (8003ce0 <HAL_UART_MspInit+0x100>)
 8003c5e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003c60:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <HAL_UART_MspInit+0xfc>)
 8003c62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c66:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c68:	4b1c      	ldr	r3, [pc, #112]	; (8003cdc <HAL_UART_MspInit+0xfc>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c6e:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <HAL_UART_MspInit+0xfc>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c74:	4b19      	ldr	r3, [pc, #100]	; (8003cdc <HAL_UART_MspInit+0xfc>)
 8003c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c7a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c7c:	4b17      	ldr	r3, [pc, #92]	; (8003cdc <HAL_UART_MspInit+0xfc>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c82:	4b16      	ldr	r3, [pc, #88]	; (8003cdc <HAL_UART_MspInit+0xfc>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003c88:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <HAL_UART_MspInit+0xfc>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c8e:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <HAL_UART_MspInit+0xfc>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c94:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <HAL_UART_MspInit+0xfc>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003c9a:	4810      	ldr	r0, [pc, #64]	; (8003cdc <HAL_UART_MspInit+0xfc>)
 8003c9c:	f7fc fdc2 	bl	8000824 <HAL_DMA_Init>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003ca6:	f7ff fb2d 	bl	8003304 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a0b      	ldr	r2, [pc, #44]	; (8003cdc <HAL_UART_MspInit+0xfc>)
 8003cae:	635a      	str	r2, [r3, #52]	; 0x34
 8003cb0:	4a0a      	ldr	r2, [pc, #40]	; (8003cdc <HAL_UART_MspInit+0xfc>)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2100      	movs	r1, #0
 8003cba:	2026      	movs	r0, #38	; 0x26
 8003cbc:	f7fc fd7b 	bl	80007b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003cc0:	2026      	movs	r0, #38	; 0x26
 8003cc2:	f7fc fd94 	bl	80007ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003cc6:	bf00      	nop
 8003cc8:	3728      	adds	r7, #40	; 0x28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40004400 	.word	0x40004400
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40020000 	.word	0x40020000
 8003cdc:	2000003c 	.word	0x2000003c
 8003ce0:	40026088 	.word	0x40026088

08003ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cf6:	e7fe      	b.n	8003cf6 <HardFault_Handler+0x4>

08003cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cfc:	e7fe      	b.n	8003cfc <MemManage_Handler+0x4>

08003cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d02:	e7fe      	b.n	8003d02 <BusFault_Handler+0x4>

08003d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d08:	e7fe      	b.n	8003d08 <UsageFault_Handler+0x4>

08003d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d1c:	bf00      	nop
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d38:	f7fc fc20 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d3c:	bf00      	nop
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003d44:	4802      	ldr	r0, [pc, #8]	; (8003d50 <DMA1_Stream5_IRQHandler+0x10>)
 8003d46:	f7fc fe9d 	bl	8000a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	2000003c 	.word	0x2000003c

08003d54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d58:	4802      	ldr	r0, [pc, #8]	; (8003d64 <USART2_IRQHandler+0x10>)
 8003d5a:	f7fe fbbf 	bl	80024dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000140 	.word	0x20000140

08003d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d6c:	4b16      	ldr	r3, [pc, #88]	; (8003dc8 <SystemInit+0x60>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <SystemInit+0x60>)
 8003d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003d7c:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <SystemInit+0x64>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <SystemInit+0x64>)
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d88:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <SystemInit+0x64>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003d8e:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <SystemInit+0x64>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a0e      	ldr	r2, [pc, #56]	; (8003dcc <SystemInit+0x64>)
 8003d94:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <SystemInit+0x64>)
 8003da0:	4a0b      	ldr	r2, [pc, #44]	; (8003dd0 <SystemInit+0x68>)
 8003da2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003da4:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <SystemInit+0x64>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <SystemInit+0x64>)
 8003daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <SystemInit+0x64>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003db6:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <SystemInit+0x60>)
 8003db8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dbc:	609a      	str	r2, [r3, #8]
#endif
}
 8003dbe:	bf00      	nop
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000ed00 	.word	0xe000ed00
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	24003010 	.word	0x24003010

08003dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003dd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003dda:	e003      	b.n	8003de4 <LoopCopyDataInit>

08003ddc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003dde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003de0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003de2:	3104      	adds	r1, #4

08003de4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003de4:	480b      	ldr	r0, [pc, #44]	; (8003e14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003de6:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003de8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003dea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003dec:	d3f6      	bcc.n	8003ddc <CopyDataInit>
  ldr  r2, =_sbss
 8003dee:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003df0:	e002      	b.n	8003df8 <LoopFillZerobss>

08003df2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003df2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003df4:	f842 3b04 	str.w	r3, [r2], #4

08003df8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003dfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003dfc:	d3f9      	bcc.n	8003df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003dfe:	f7ff ffb3 	bl	8003d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e02:	f000 f811 	bl	8003e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e06:	f7ff fa85 	bl	8003314 <main>
  bx  lr    
 8003e0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003e10:	08003ec8 	.word	0x08003ec8
  ldr  r0, =_sdata
 8003e14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e18:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003e1c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003e20:	20000188 	.word	0x20000188

08003e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e24:	e7fe      	b.n	8003e24 <ADC_IRQHandler>
	...

08003e28 <__libc_init_array>:
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	4e0d      	ldr	r6, [pc, #52]	; (8003e60 <__libc_init_array+0x38>)
 8003e2c:	4c0d      	ldr	r4, [pc, #52]	; (8003e64 <__libc_init_array+0x3c>)
 8003e2e:	1ba4      	subs	r4, r4, r6
 8003e30:	10a4      	asrs	r4, r4, #2
 8003e32:	2500      	movs	r5, #0
 8003e34:	42a5      	cmp	r5, r4
 8003e36:	d109      	bne.n	8003e4c <__libc_init_array+0x24>
 8003e38:	4e0b      	ldr	r6, [pc, #44]	; (8003e68 <__libc_init_array+0x40>)
 8003e3a:	4c0c      	ldr	r4, [pc, #48]	; (8003e6c <__libc_init_array+0x44>)
 8003e3c:	f000 f820 	bl	8003e80 <_init>
 8003e40:	1ba4      	subs	r4, r4, r6
 8003e42:	10a4      	asrs	r4, r4, #2
 8003e44:	2500      	movs	r5, #0
 8003e46:	42a5      	cmp	r5, r4
 8003e48:	d105      	bne.n	8003e56 <__libc_init_array+0x2e>
 8003e4a:	bd70      	pop	{r4, r5, r6, pc}
 8003e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e50:	4798      	blx	r3
 8003e52:	3501      	adds	r5, #1
 8003e54:	e7ee      	b.n	8003e34 <__libc_init_array+0xc>
 8003e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e5a:	4798      	blx	r3
 8003e5c:	3501      	adds	r5, #1
 8003e5e:	e7f2      	b.n	8003e46 <__libc_init_array+0x1e>
 8003e60:	08003ec0 	.word	0x08003ec0
 8003e64:	08003ec0 	.word	0x08003ec0
 8003e68:	08003ec0 	.word	0x08003ec0
 8003e6c:	08003ec4 	.word	0x08003ec4

08003e70 <memset>:
 8003e70:	4402      	add	r2, r0
 8003e72:	4603      	mov	r3, r0
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d100      	bne.n	8003e7a <memset+0xa>
 8003e78:	4770      	bx	lr
 8003e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e7e:	e7f9      	b.n	8003e74 <memset+0x4>

08003e80 <_init>:
 8003e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e82:	bf00      	nop
 8003e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e86:	bc08      	pop	{r3}
 8003e88:	469e      	mov	lr, r3
 8003e8a:	4770      	bx	lr

08003e8c <_fini>:
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	bf00      	nop
 8003e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e92:	bc08      	pop	{r3}
 8003e94:	469e      	mov	lr, r3
 8003e96:	4770      	bx	lr
